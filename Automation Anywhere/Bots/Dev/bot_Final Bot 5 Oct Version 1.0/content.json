{"triggers":[],"nodes":[{"uid":"a4586102-ba83-4757-bf3c-3cef581e126c","commandName":"connect","packageName":"Database","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"connectionMode","value":{"type":"STRING","string":"USER"}},{"name":"databaseProvider","value":{"type":"STRING","string":"SQLOLEDB.1"}},{"name":"server","value":{"type":"STRING","string":"NDS-AA-02"}},{"name":"database","value":{"type":"STRING","string":"HPU"}},{"name":"user","value":{"type":"STRING","string":"RPA"}},{"name":"auth","value":{"type":"STRING","string":"nds1@2020"}},{"name":"instance","value":{"type":"STRING","string":""}},{"name":"isUserDefinedDriver","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"c08f05a0-b531-45ec-a0d0-81fafdaad6c7","commandName":"emailConnect","packageName":"Email","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"EmailSession"}},{"name":"serverType","value":{"type":"STRING","string":"OUTLOOK"}}]},{"uid":"9f8f90cd-948b-4676-a6a9-53fcb5260e52","commandName":"loop.commands.start","packageName":"Loop","disabled":false,"children":[{"uid":"1470a5ba-a16f-4bff-bb64-97b065402db2","commandName":"store","packageName":"Database","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"query","value":{"type":"STRING","string":"USP_InsertEmailLog"}},{"name":"entryList","value":{"type":"LIST","list":[{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":""}},{"key":"parametervalue","value":{"type":"STRING","expression":"$UnReadMail{emailSubject}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"VARCHAR"}}]},{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":""}},{"key":"parametervalue","value":{"type":"STRING","expression":"$UnReadMail{emailMessage}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"VARCHAR"}}]},{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":""}},{"key":"parametervalue","value":{"type":"STRING","expression":"$UnReadMail{emailFrom}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"VARCHAR"}}]}]}},{"name":"doExport","value":{"type":"BOOLEAN","boolean":false}}],"returnTo":{"type":"VARIABLE","variableName":"EmailLogID"}},{"uid":"8ef6ff62-8181-457d-b061-2a5e85057372","commandName":"disconnect","packageName":"Database","disabled":true,"attributes":[{"name":"session","value":{"string":"Default","type":"STRING"}}]},{"uid":"8f5e6627-863d-4da7-a116-76eb1553fc04","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"\n\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Oct 24 15:09:40 2020\n\n@author: dmohanty\n\"\"\"\nimport pandas as pd\nimport pyodbc \nimport os\nfrom datetime import datetime\nfrom datetime import date\nimport traceback\ntoday = date.today()\n\npath = 'D:/HPUBOT_LOG/CLIENT_CLASSIFICATION/'\n\n\n\n\nconn_str = (\n    r'DRIVER={SQL Server};'\n    r'SERVER=NDS-AA-02;'\n    r'DATABASE=HPU;'\n    r'Trusted_Connection=no;'\n    r'UID=RPA;'\n    r'PWD=nds1@2020;'\n    r'autocommit=True'\n)\n\npath = 'D:/HPUBOT_LOG/CLIENT_CLASSIFICATION/'\n\ngblclientId ='0'\ngblinemailid ='0'\n\ndef loginfo(traceback, additionalinfo):\n    isdir = os.path.isdir(path)  \n    if isdir == False:\n        os.makedirs(path)\n    try:\n        file_object  = open(path+\"\\\\\"+str(today)+\".txt\", \"a\") \n        file_object.write(str(datetime.now())[0:19]+'|'+'InEmailId:'+gblinemailid+'|'+additionalinfo+\"|\"+str(traceback)+str(\"\\n\"))\n        file_object.close()\n    finally:\n        if file_object != None:\n            file_object.close()\n            \n    \n\ndef ClassifySenderEmail():\n    #conhdr = pyodbc.connect(conn_str)\n    global gblclientId\n    global gblinemailid\n    try:\n        try:\n            cnxn = pyodbc.connect(conn_str)\n            sqlExecSP=\"{call USP_GetMailsToBeClassifiedForClient }\"\n            dfMailListToBeClassified = pd.read_sql_query(sql=sqlExecSP, con=cnxn)\n            cnxn.close()\n        except Exception:\n            cnxn.close()\n            raise\n        \n        for rowclientindex in dfMailListToBeClassified.index:\n            print(rowclientindex, dfMailListToBeClassified['ID'][rowclientindex],dfMailListToBeClassified['FROM_EMAIL_ADDRESS'][rowclientindex],dfMailListToBeClassified['SUBJECT'][rowclientindex])\n            inemailid=int(dfMailListToBeClassified['ID'][rowclientindex])\n            gblinemailid = str(inemailid)\n            senderemailaddress=dfMailListToBeClassified['FROM_EMAIL_ADDRESS'][rowclientindex]\n            receivedmailsubjectbody=dfMailListToBeClassified['SUBJECT'][rowclientindex]+' '+dfMailListToBeClassified['MAIL_BODY'][rowclientindex]\n            #cnxn = pyodbc.connect(conn_str)\n            outputmsg=''\n            ismailclassified=False\n            classifiedclientid=0\n            classifiedclientname=''\n            try:\n                cnxn = pyodbc.connect(conn_str)\n                sqlExecSP=\"{call USP_GetClientListFromIncomingEmailId (?)}\"\n                params = (senderemailaddress,)\n                dfClientIncomingEmails = pd.read_sql_query(sql=sqlExecSP, con=cnxn, params=params)\n                cnxn.close()\n            except Exception:\n                cnxn.close()\n                raise\n           \n                \n            \n            #print (dfClientIncomingEmails)\n            #print( len(dfClientIncomingEmails.index))\n            if(dfClientIncomingEmails.shape[0] > 0):\n                if(dfClientIncomingEmails.shape[0] > 1):\n                    try:\n                        cnxn = pyodbc.connect(conn_str)\n                        sqlExecSP=\"{call USP_GetCrosswalkKeyListFromIncomingEmailId (?)}\"\n                        params = (senderemailaddress,)\n                        dfClientCrosswalkKeywords = pd.read_sql_query(sql=sqlExecSP, con=cnxn, params=params)\n                        cnxn.close()\n                    except Exception:\n                        cnxn.close()\n                        raise\n                    #print (dfClientIncomingEmails)\n                    #print( len(dfClientCrosswalkKeywords.index))\n                    formattedmailsubjectbody=receivedmailsubjectbody.upper().replace(\" \",\"\")\n                    for rowindex in dfClientCrosswalkKeywords.index:\n                        #print(rowindex, dfClientCrosswalkKeywords['MAIL_KEY_WORD'][rowindex],dfClientCrosswalkKeywords['CLIENT_ID'][rowindex],dfClientCrosswalkKeywords['CLIENT_NAME'][rowindex])\n                        formattedkeyword=dfClientCrosswalkKeywords['MAIL_KEY_WORD'][rowindex]\n                        formattedkeyword=formattedkeyword.upper().replace(\" \",\"\")\n                        if formattedkeyword in formattedmailsubjectbody:\n                            outputmsg='2-Mail classiifed successfully'\n                            ismailclassified=True\n                            classifiedclientid= dfClientCrosswalkKeywords['CLIENT_ID'][rowindex]\n                            classifiedclientname=dfClientCrosswalkKeywords['CLIENT_NAME'][rowindex]\n                            break\n                    if ismailclassified == False :\n                        outputmsg='4-Mail could not be classified. keyword is not matching'\n                    \n                else:\n                    outputmsg='1-Mail classiifed successfully'\n                    ismailclassified=True\n                    classifiedclientid= dfClientIncomingEmails['CLIENT_ID'][0]\n                    classifiedclientname=dfClientIncomingEmails['CLIENT_NAME'][0]      \n            else:\n                outputmsg='3-Mail could not be classified. Sender email id s not found in database'\n            #cnxnnew = pyodbc.connect(conn_str)\n            try:\n                cnxn = pyodbc.connect(conn_str)\n                cur = cnxn.cursor()\n                sqlExecSP=\"{call USP_UPDATEMAILCLASSIFICATIONCLIENTIDNew (?,?,?,?)}\"\n                cur.execute(sqlExecSP,int(inemailid),senderemailaddress,int(classifiedclientid),outputmsg)\n                cnxn.commit()\n                cnxn.close()\n                cur.close()\n            except Exception:\n                cnxn.close()\n                cur.close()\n                raise\n            #return (OUT_OUTPUT_MSG,OUT_IS_MAIL_CLASSIFIED,OUT_CLASSIFIED_CLIENT_ID,OUT_CLASSIFIED_CLIENT_NAME)\n    except:\n        loginfo(traceback.format_exc(),'ClassifySenderEmail()')\n          \n    \n    \n\n\nClassifySenderEmail()\nprint('Classification program processed successfully')\n"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"19acecd0-d5b2-43b0-9a21-d3c3f6610c72","commandName":"python.commands.executeScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"string":"Default","type":"STRING"}}]},{"uid":"590fc13d-6798-473c-afba-fe4929abd092","commandName":"loop.commands.start","packageName":"Loop","disabled":false,"children":[{"uid":"5a36660f-3934-4e63-a1ee-6febb01267c3","commandName":"assignToNumber","packageName":"Number","disabled":false,"attributes":[{"name":"input","value":{"type":"NUMBER","expression":"$DB_Record{ID}$"}}],"returnTo":{"type":"VARIABLE","variableName":"EmailLogID1"}},{"uid":"24c26071-e9a9-4b01-b51b-af78d762c13e","commandName":"store","packageName":"Database","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"query","value":{"type":"STRING","string":"USP_GetClientIDFromEmailLog"}},{"name":"entryList","value":{"type":"LIST","list":[{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":"@ID"}},{"key":"parametervalue","value":{"type":"STRING","expression":"$DB_Record{ID}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"INTEGER"}}]}]}},{"name":"doExport","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"636e2e53-d147-42fe-810f-78dbf9249bb8","commandName":"loop.commands.start","packageName":"Loop","disabled":false,"children":[{"uid":"ce3cd1fd-19f4-4368-b79a-d79bf46b89ab","commandName":"if","packageName":"If","disabled":false,"children":[{"uid":"cc92a3e4-2bb3-4eb6-b81e-c761472b0fab","commandName":"messageBox","packageName":"MessageBox","disabled":true,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","expression":"$EMAIL_Record{CLIENTID}$"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"e50a3e04-1527-4d36-9dfa-4789268365f5","commandName":"store","packageName":"Database","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"query","value":{"type":"STRING","string":"USP_GET_CLIENT_DETAIL_MASTER"}},{"name":"entryList","value":{"type":"LIST","list":[{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":"@CLIENTID"}},{"key":"parametervalue","value":{"type":"STRING","expression":"$EMAIL_Record{CLIENTID}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"INTEGER"}}]}]}},{"name":"doExport","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"bcf2da01-2db3-4ff5-949d-b59f843da113","commandName":"loop.commands.start","packageName":"Loop","disabled":false,"children":[{"uid":"8aa5148b-2de7-4076-9651-c5091b452324","commandName":"messageBox","packageName":"MessageBox","disabled":true,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"edce3b3e-df92-4384-8904-452cc66c3a68","commandName":"assign","packageName":"String","disabled":false,"attributes":[{"name":"sourceString","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$"}}],"returnTo":{"type":"VARIABLE","variableName":"download_path"}},{"uid":"f754c940-a2dc-4fd9-89c0-bb8968ea27f5","commandName":"if","packageName":"If","disabled":false,"children":[{"uid":"360315f0-b572-43dc-98a3-73af4e70327b","commandName":"assign","packageName":"String","disabled":false,"attributes":[{"name":"sourceString","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$\\$MASTER_RECORD{\"DownloadFolderName\"}$"}}],"returnTo":{"type":"VARIABLE","variableName":"download_path2"}},{"uid":"9907edc7-cb9c-4d71-89f0-60e4cc2b2244","commandName":"if","packageName":"If","disabled":false,"children":[],"branches":[{"uid":"37729063-6897-4ede-953b-f7e292eaca07","commandName":"else","packageName":"If","disabled":false,"children":[{"uid":"fc595606-9ded-45ab-a990-5a7476ac42fb","commandName":"createFolder","packageName":"Folder","disabled":false,"attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$\\$MASTER_RECORD{\"DownloadFolderName\"}$"}},{"name":"isOverwrite","value":{"type":"BOOLEAN","boolean":false}}]}]}],"attributes":[{"name":"condition","attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$download_path2$"}},{"name":"waitTimeout","value":{"type":"NUMBER","number":"0"}}],"value":{"type":"CONDITIONAL","conditionalName":"folderExists","packageName":"Folder"}}]},{"uid":"b2b1547c-ee59-4448-9861-96a313c070e2","commandName":"assign","packageName":"String","disabled":false,"attributes":[{"name":"sourceString","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$\\$MASTER_RECORD{\"DownloadFolderName\"}$\\$DB_Record{ID}$"}}],"returnTo":{"type":"VARIABLE","variableName":"createfolder2"}},{"uid":"e80ffe35-9f14-4276-a34c-c6886d9ab9af","commandName":"createFolder","packageName":"Folder","disabled":false,"attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$\\$MASTER_RECORD{\"DownloadFolderName\"}$\\$DB_Record{ID}$"}},{"name":"isOverwrite","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"8533edc0-04df-4a32-a25e-317194f9a43f","commandName":"saveAttachment","packageName":"Email","disabled":false,"attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$\\$MASTER_RECORD{\"DownloadFolderName\"}$\\$DB_Record{ID}$"}},{"name":"checkOverrwrite","value":{"type":"BOOLEAN","boolean":true}}]}],"branches":[{"uid":"b98f4a28-5b01-49db-9e94-dabc7d1a181d","commandName":"else","packageName":"If","disabled":false,"children":[{"uid":"a92df520-1e06-49d8-9d3f-4b6447a91f95","commandName":"messageBox","packageName":"MessageBox","disabled":false,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","string":"fOLDER pATH"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]}]}],"attributes":[{"name":"condition","attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$download_path$"}},{"name":"waitTimeout","value":{"type":"NUMBER","number":"0"}}],"value":{"type":"CONDITIONAL","conditionalName":"folderExists","packageName":"Folder"}}]}],"attributes":[{"name":"loopType","value":{"type":"STRING","string":"ITERATOR"}},{"name":"iterator","returnTo":{"type":"VARIABLE","variableName":"MASTER_RECORD"},"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}}],"value":{"type":"ITERATOR","iteratorName":"iterators.resultset","packageName":"Database"}}]},{"uid":"946f4a0a-8b93-4041-b7af-70a34ed20302","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default1"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"\n# def ADD_DELETE():\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Oct 23 10:13:57 2020\n\n@author: khambarde\n\n\nhttp://nds-aa-01.cyberdyne.ndsinfo.com:8080/#/bots/repository/private/taskbots/24/edit\n\nCLIENTID = CLIENTID\nEMAILID = EMAILID\nFILE_PATH = FILE_PATH\n\n\"\"\"\nimport xlrd\nimport re\nimport pyodbc \nfrom datetime import datetime\nimport pandas as pd\nimport os\nfrom datetime import date\nimport os.path  \ntoday = date.today()\nimport traceback\nfrom datetime import datetime\n\n                                    \ndef Index_First_Name(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'FirstName' in text:\n        \n            if str(sheet.row_values(i)[0]).replace(\" \", \"\") == 'FirstName':\n                 IndexFirstName = 0\n                 \n            elif str(sheet.row_values(i)[1]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 1\n                \n            elif str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 9\n            \n            break\n    return IndexFirstName\n    \n\ndef Index_Last_Name(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'LastName' in text:\n        \n            if str(sheet.row_values(i)[1]).replace(\" \", \"\") == 'LastName':\n                 IndexLastName = 1\n                                 \n            elif str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 9\n            \n            break\n    return IndexLastName\n    \n\ndef Index_SSN(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        \n        if 'SSN' in text:\n\n            if str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 9\n            \n            break\n    return IndexSSN        \n        \n\ndef Index_DOB(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'DOB' in text:\n\n            if str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 9\n            \n            break\n    return IndexDOB        \n                    \n\ndef Index_Effective_Date(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'EffectiveDate' in text or 'AddEffectiveDate' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 9\n            \n            break\n    return IndexEffectiveDate        \n        \n\n\ndef Index_DateDeleted(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'DateDeleted' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'DateDeleted': \n                IndexDateDeleted = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'DateDeleted': \n                IndexDateDeleted = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 12\n            break\n    return IndexDateDeleted      \n\n\ndef Index_Status(sheet):    \n    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'Status' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'Status': \n                IndexStatus = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'Status': \n                IndexStatus = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 12\n            break\n    return IndexStatus      \n\n\n\ndef Index_Address(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'Address' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'Address': \n                IndexAddress = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'Address': \n                IndexAddress = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 12\n                                    \n            elif str(sheet.row_values(i)[13]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 13\n                \n            elif str(sheet.row_values(i)[14]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 14\n            break\n    return IndexAddress      \n\n\ndef Index_City(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'City' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'City': \n                IndexCity = 2\n                \n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'City':\n                IndexCity = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'City':\n                IndexCity = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'City':\n                IndexCity = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'City':\n                IndexCity = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'City':\n                IndexCity = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'City':\n                IndexCity = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'City':\n                IndexCity = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'City':\n                IndexCity = 12\n                                    \n            elif str(sheet.row_values(i)[13]).replace(\" \", \"\") == 'City':\n                IndexCity = 13\n                \n            elif str(sheet.row_values(i)[14]).replace(\" \", \"\") == 'City':\n                IndexCity = 14\n                \n            elif str(sheet.row_values(i)[15]).replace(\" \", \"\") == 'City':\n                IndexCity = 15\n                \n            elif str(sheet.row_values(i)[16]).replace(\" \", \"\") == 'City':\n                IndexCity = 16\n            break\n    return IndexCity    \n\n\ndef Index_State(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'State' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'State': \n                IndexState = 2\n                \n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'State':\n                IndexState = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'State':\n                IndexState = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'State':\n                IndexState = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'State':\n                IndexState = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'State':\n                IndexState = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'State':\n                IndexState = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'State':\n                IndexState = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'State':\n                IndexState = 12\n                                    \n            elif str(sheet.row_values(i)[13]).replace(\" \", \"\") == 'State':\n                IndexState = 13\n                \n            elif str(sheet.row_values(i)[14]).replace(\" \", \"\") == 'State':\n                IndexState = 14\n                \n            elif str(sheet.row_values(i)[15]).replace(\" \", \"\") == 'State':\n                IndexState = 15\n                \n            elif str(sheet.row_values(i)[16]).replace(\" \", \"\") == 'State':\n                IndexState = 16                \n                            \n            elif str(sheet.row_values(i)[17]).replace(\" \", \"\") == 'State':\n                IndexState = 17\n                \n            elif str(sheet.row_values(i)[18]).replace(\" \", \"\") == 'State':\n                IndexState = 18\n            break\n    return IndexState       \n\n\ndef Index_ZipCode(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'ZipCode' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'ZipCode': \n                IndexZipCode = 2\n                \n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 12\n                                    \n            elif str(sheet.row_values(i)[13]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 13\n                \n            elif str(sheet.row_values(i)[14]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 14\n                \n            elif str(sheet.row_values(i)[15]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 15\n                \n            elif str(sheet.row_values(i)[16]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 16                \n                            \n            elif str(sheet.row_values(i)[17]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 17\n                \n            elif str(sheet.row_values(i)[18]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 18\n            break\n    return IndexZipCode       \n\n\ndef First_Name_Line_Number(sheet):\n    LineCount = 1\n    for i in range(sheet.nrows):   \n        try:                \n            text = str(sheet.row_values(i))\n            text = text.strip()\n            text = text.replace(\" \", \"\")\n            \n            if 'FirstName' in text:\n                break\n            LineCount +=1\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    return LineCount\n            \n\ndef CensusDate(sheet):        \n    Census_Date = None\n    fromfile = None\n    for i in range(sheet.nrows):\n        try:                \n            text = str(sheet.row_values(i))\n            text = text.strip()\n            text = text.replace(\" \", \"\")\n            if  'report' in text.lower():                        \n                try:                 \n                    #from file report \n                    fromfile = 'no' #to check date\n                    Census_Month = r\"\\d{5}\"\n                    prog = re.compile(Census_Month, re.IGNORECASE)\n                    mo = prog.search(text)  \n                    Number = mo.group()        \n                    Census_Date = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(Number) - 2)\n                    break\n                except Exception:\n                   file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n            else:\n                #from filename\n                fromfile = 'yes'                                                     \n                text = Attachment.strip()\n                text = Attachment.strip()\n                text = Attachment.replace(\" \", \"\")\n                Census_Month = r\"\\d{4}\"\n                prog = re.compile(Census_Month, re.IGNORECASE)\n                mo = prog.search(Attachment) \n                Number =  mo.group()      \n                Census_Date = str(Number[0])+str(Number[1])+str(0)+str(1)+str(Number[2])+str(Number[3])\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    return Census_Date, fromfile\n            \n################\ndef RetroActiveDate(CensusMonthDate,CLIENT_EffectiveDate):\n    RetroActive = None\n    if fromfile == 'no':\n        try:\n            yymm = str(CensusMonthDate)[0:8] #'2019-11-'\n            dd = str(CLIENT_EffectiveDate)[8:10] #'30'\n            RetroActive = yymm+dd\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    else:\n        try:                            \n            print(fromfile)\n            yyyy = str(20)+CensusMonthDate[-2:]\n            RetroActive = yyyy+str('-')+CensusMonthDate[0:2]+str('-')+str('01')\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    \n    return RetroActive    \n\n\ndef PolicyNumberExtrator(sheet):\n    Policy_Number = None\n    POLICY_NO_STATUS = None\n    for i in range(sheet.nrows):   \n        try:                \n            print(sheet.row_values(i))\n            text = str(sheet.row_values(i))\n            Policy_Number = ''\n            if 'policy' in text.lower():\n                PolicyNumberPattern = r\"([Q])\\d{4}-OA\\d{2}-\\d{7}([A-Z])\"\n                prog = re.compile(PolicyNumberPattern, re.IGNORECASE)\n                mo = prog.search(text)   \n                if mo is not None:                                \n                    Policy_Number = mo.group()    \n                    POLICY_NO_STATUS = 'POLICY_NUMBER FOUND'\n                else:\n                    POLICY_NO_STATUS = 'POLICY_NUMBER NOT FOUND'\n                break\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n            \n    return Policy_Number, POLICY_NO_STATUS\n        \n\ndef data(i, sheet, EMAILID, CLIENTID):\n    First_Name = None\n    SSN = None\n    Last_Name = None\n    DOB = None\n    Effective_Date = None\n    Date_Deleted = None\n    Status = None\n    Address = None\n    City = None\n    State = None\n    ZipCode = None\n    EMAILID = EMAILID\n    CLIENTID = CLIENTID\n    \n    try:            \n        if str(sheet.row_values(i)[IndexFistName]) != '':\n            First_Name = str(sheet.row_values(i)[IndexFistName])\n                        \n        if str(sheet.row_values(i)[IndexLastName]) != '':\n            Last_Name = str(sheet.row_values(i)[IndexLastName])\n        \n        if str(sheet.row_values(i)[IndexSSN]) != '':   \n            SSN = str(sheet.row_values(i)[IndexSSN])\n            \n        if sheet.row_values(i)[IndexDOB] != '' and len(str(sheet.row_values(i)[IndexDOB])) > 5:\n     \n            DOB = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(sheet.row_values(i)[IndexDOB]) - 2)\n            \n        if sheet.row_values(i)[IndexEffectiveDate] != '' and len(str(sheet.row_values(i)[IndexEffectiveDate])) > 5:  \n            Effective_Date = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(sheet.row_values(i)[IndexEffectiveDate]) - 2)\n            \n        if sheet.row_values(i)[IndexDateDeleted] != '' and len(str(sheet.row_values(i)[IndexDateDeleted])) > 5:  \n            Date_Deleted = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(sheet.row_values(i)[IndexDateDeleted]) - 2)\n            \n        if sheet.row_values(i)[IndexStatus] != '':\n            Status = str(sheet.row_values(i)[IndexStatus])\n            \n        if sheet.row_values(i)[IndexAddress] != '':\n            Address = sheet.row_values(i)[IndexAddress]\n            \n        if sheet.row_values(i)[IndexCity] != '':\n            City = sheet.row_values(i)[IndexCity]\n            \n        if sheet.row_values(i)[IndexState] != '':\n            State = sheet.row_values(i)[IndexState]\n            \n        if sheet.row_values(i)[IndexZipCode] != '':\n            ZipCode = sheet.row_values(i)[IndexZipCode]\n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n        # file_object\n    \n            \n    return First_Name, Last_Name, SSN, DOB, Effective_Date, Date_Deleted, Status, Address, City, State, ZipCode\n\n\ndef DumpData(sheet, EMAILID,CLIENTID):\n    conn_str = (\n    r'DRIVER={SQL Server};'\n    r'SERVER=NDS-AA-02;'\n    r'DATABASE=HPU;'\n    r'Trusted_Connection=no;'\n    r'UID=RPA;'\n    r'PWD=nds1@2020;'\n    r'autocommit=True')\n    cnxn = pyodbc.connect(conn_str)\n    cur = cnxn.cursor()\n    EMAILID = EMAILID\n    CLIENTID = CLIENTID\n\n    \n    cnxn = pyodbc.connect(conn_str)\n    cur = cnxn.cursor()\n    DataCounter = 1\n    for i in range(sheet.nrows):   \n        try:            \n            text = str(sheet.row_values(i))\n            if DataCounter > First_Name_Line_Number(sheet):\n                if 'First Name' not in text or 'Name' not in text:\n                    # print(data(i,sheet))\n                    First_Name, Last_Name, SSN, DOB, Effective_Date, Date_Deleted, Status, Address, City, State, ZipCode = data(i,sheet,EMAILID, CLIENTID)\n                    \n                    sqlExecSP=\"{call USP_INSERT_EMAIL_ADD_DELETE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}\"\n                    cur.execute(sqlExecSP,EMAILID,IN_ATTACHMENT_ID, CLIENTID,MONTH_YEARi, First_Name,Last_Name,SSN,DOB,Effective_Date,Date_Deleted,Status,Address,City,State,ZipCode)\n                    cur.commit()                \n            DataCounter += 1\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    cur.close()\n    cnxn.close()\n            \n\n\n###################################\n#Exception\npath = 'D:/HPUBOT_LOG/'\nisdir = os.path.isdir(path)  \n# print(isdir)  \nif isdir == False:\n    os.makedirs(path)\nfile_object  = open(path+\"\\\\\"+str(today)+\".txt\", \"a\") \n\n###################################\nconn_str = (\n    r'DRIVER={SQL Server};'\n    r'SERVER=NDS-AA-02;'\n    r'DATABASE=HPU;'\n    r'Trusted_Connection=no;'\n    r'UID=RPA;'\n    r'PWD=nds1@2020'\n)\ntry:\n    cnxn = pyodbc.connect(conn_str)\n    cur = cnxn.cursor()\n    cnxn = pyodbc.connect(conn_str)\nexcept Exception:\n    file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n\ntry:\n    sqlExecSP=\"{call USP_GetEMailLogID}\"\n    dfMailListToBeClassified = pd.read_sql_query(sql=sqlExecSP, con=cnxn)\nexcept Exception:\n    file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    \ntry:        \n    EMAILID = int(dfMailListToBeClassified['ID'][0])\n    CLIENTID = dfMailListToBeClassified['CLIENTID'][0]\n    emailSender = dfMailListToBeClassified['FROM_EMAIL_ADDRESS'][0]\n    # EMAILID = 262\n    # CLIENTID = 123\n    \nexcept Exception:\n    file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n\n\nif CLIENTID == None:\n    # print('unclassified')\n    try:            \n        USP_UNCLASSIFIEDCLIENTMAIL_SentEmail=\"{call USP_UNCLASSIFIEDCLIENTMAIL_SentEmail (?,?)}\"\n        cur.execute(USP_UNCLASSIFIEDCLIENTMAIL_SentEmail,int(EMAILID),str(emailSender))\n        cur.commit()  \n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\nelse:\n    \n    ###############################\n    try:            \n        CLIENTID = int(CLIENTID)\n        USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n        params = [int(CLIENTID)]\n        dfClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)\n        \n        CLIENT_NAME = dfClientMasterTable['CLIENT_NAME'][0]\n        CLIENT_EMAILID = dfClientMasterTable['CLIENT_EMAILID'][0]\n        DOWNLOAD_PATH = dfClientMasterTable['DOWNLOAD_PATH'][0]\n        Cleint_STATUS = dfClientMasterTable['STATUS'][0]\n        DownloadFolderName = dfClientMasterTable['DownloadFolderName'][0]\n        OA_POLICY_NUMBER = dfClientMasterTable['OA_POLICY_NUMBER'][0]\n        CLIENT_EffectiveDate = dfClientMasterTable['EFFECTIVE_DATE'][0]\n        QBE = dfClientMasterTable['QBE'][0]\n        EXCEL_SHEET_ORDER = dfClientMasterTable['EXCEL_SHEET_ORDER'][0]\n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n        \n    ###################################\n    \n    try:\n        Folder_Path = DOWNLOAD_PATH+'\\\\'+DownloadFolderName+'\\\\'+str(EMAILID)\n        dirs = os.listdir(Folder_Path)\n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    \n    ############################\n    # No Attachment            #\n    ############################   \n    try:\n        if len(dirs) == 0 or dirs is None:                \n            try:\n                USP_NoAttachment = \"{ call USP_NoAttachment (?,?,?)}\"\n                cur.execute(USP_NoAttachment, CLIENTID, EMAILID, emailSender)\n                cur.commit() \n            except Exception:\n                file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    \n    else:\n        FileCount = 1    \n        for Attachment in dirs:\n            Attachment = Attachment.lower()\n            if Attachment[-3:] == 'xls' or Attachment[-3:] == 'xls' or Attachment[-4:] == 'xlsx':\n                try:                        \n                    Folder_Path = Folder_Path+'\\\\'+Attachment                        \n                    # a = r'E:\\Midwestern Insurance\\TESTING PYTHON\\1119 All Pro Freight Systems-South - Add-Delete Report November 2019.xlsx'\n                    df = pd.read_excel(Folder_Path)\n                    book = xlrd.open_workbook(Folder_Path)\n                    if EXCEL_SHEET_ORDER == 'LR':\n                        for sheet in book.sheets():\n                            sheet = book.sheet_by_name(sheet.name)\n                            # print(sheet.name)\n                            # print(sheet.nrows)\n                    else:\n                        for sheet in book.sheets():\n                            sheet = book.sheet_by_name(sheet.name)\n                            print(sheet.name)\n                            print(sheet.nrows)\n                            break\n                except Exception:\n                    file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                    \n                    \n                ############################\n                # Census Date              #\n                ############################           \n                CensusMonthDate, fromfile = CensusDate(sheet)\n                \n                if CensusMonthDate is not  None:\n                        \n                    if fromfile =='yes':\n                        CensusMonthDatei = str(20)+str(CensusMonthDate[-2:])+str('-')+str(CensusMonthDate[0:2])+str('-')+str('01')\n                        MONTH_YEARi = CensusMonthDatei\n                    else:\n                        MONTH_YEARi = str(CensusMonthDate)[0:10]     \n                        \n                    IN_ATTACHMENT_ID = FileCount\n        \n                    ############################\n                    # Retro Active             #\n                    ############################ \n                    \n                    RetroDate = RetroActiveDate(CensusMonthDate,CLIENT_EffectiveDate)\n                    \n                    \n                    #############################            \n                    # Policy Number from File   #\n                    #############################\n                    \n                    PolicyNumberfromfile = PolicyNumberExtrator(sheet)\n                    \n                    if len(PolicyNumberfromfile[0]) == 19:\n                        USP_VerifyOAPolicyNumber =\"{call USP_VerifyOAPolicyNumber(?,?,?)}\"\n                        params = [int(CLIENTID),PolicyNumberfromfile[0],EMAILID]\n                        dfpolicynumber = pd.read_sql_query(sql= USP_VerifyOAPolicyNumber, params=params, con=cnxn)\n                        if len(dfpolicynumber) > 0:\n                            VerifyClientId = dfpolicynumber['CLIENTID'][0]\n                        \n                            if VerifyClientId == CLIENTID:\n                                cnxn = pyodbc.connect(conn_str)\n                                cur = cnxn.cursor()\n                                cur.execute(\"UPDATE EMAIL_LOG SET VERIFY_POLICY_NO_FROM_MASTER = 'YES', POLICY_NUMBER_AVAILABLE = 'YES' WHERE ID =\"+str(EMAILID))\n                                cur.commit()                \n                        else:\n                            USP_PolicyNumberNotMatching = \"{ call USP_PolicyNumberNotMatching (?,?,?,?,?,?)}\"\n                            cur.execute(USP_PolicyNumberNotMatching, CLIENTID, MONTH_YEARi, EMAILID, IN_ATTACHMENT_ID, emailSender, Attachment)                \n                            cur.commit()  \n                            VerifyClientId = ''\n                            PolicyNumberNotMatching = 'NO'\n                    else:\n                        sqlExecSP12=\"{call USP_IdentifyOAPolicyNumberFromFile(?,?,?)}\"\n                        cur.execute(sqlExecSP12,CLIENTID,PolicyNumberfromfile[0], EMAILID)\n                        cur.commit()    \n                        VerifyClientId = ''\n                        PolicyNumberNotMatching = ''\n                        \n                    ############################\n                    # VERIFIED POLICY          #\n                    ############################ \n                    if VerifyClientId == CLIENTID:\n                        \n                        ############################\n                        # Index init START HERE    #\n                        ############################                                  \n                        IndexFistName = Index_First_Name(sheet)\n                        IndexLastName = Index_Last_Name(sheet)\n                        IndexSSN = Index_SSN(sheet)\n                        IndexDOB = Index_DOB(sheet)\n                        IndexEffectiveDate = Index_Effective_Date(sheet)\n                        IndexDateDeleted = Index_DateDeleted(sheet)\n                        IndexStatus = Index_Status(sheet)\n                        IndexAddress = Index_Address(sheet)\n                        IndexCity = Index_City(sheet)\n                        IndexState = Index_State(sheet)\n                        IndexZipCode = Index_ZipCode(sheet)\n                        \n                        \n                        conn_str = (\n                            r'DRIVER={SQL Server};'\n                            r'SERVER=NDS-AA-02;'\n                            r'DATABASE=HPU;'\n                            r'Trusted_Connection=no;'\n                            r'UID=RPA;'\n                            r'PWD=nds1@2020'\n                        )\n                        cnxn = pyodbc.connect(conn_str)\n                        cur = cnxn.cursor()\n                        \n                        #############################################\n                        # MONTH_YEAR = str(CensusMonthDate)[0:10]                \n                        \n                    \n                                   \n                        if PolicyNumberfromfile[1] == 'POLICY_NUMBER FOUND':\n                            \n                            ############################\n                            # Dump Data START HERE     #\n                            ############################    \n                            DumpData(sheet,EMAILID, CLIENTID)\n                                                    \n                            ###################################################                    \n                            conn_str = (\n                            r'DRIVER={SQL Server};'\n                            r'SERVER=NDS-AA-02;'\n                            r'DATABASE=HPU;'\n                            r'Trusted_Connection=no;'\n                            r'UID=RPA;' \n                            r'PWD=nds1@2020;'\n                            r'autocommit=True')\n                            cnxn = pyodbc.connect(conn_str)\n                            cur = cnxn.cursor()\n                            \n                            #######################################\n                            #Vijay \n                            ChangeStatusToACTIVEDELETED = \"{ call ChangeStatusToACTIVEDELETED (?,?)}\"\n                            cur.execute(ChangeStatusToACTIVEDELETED,int(CLIENTID),MONTH_YEARi)\n                            cur.commit()\n                            \n                            \n                            ############################\n                            # Roll Back START HERE     #\n                            ############################\n                                        \n                            USP_UPDATEEMAILPROCESSSTATUS = \"{ call USP_UPDATEEMAILPROCESSSTATUS (?,?,?,?)}\"\n                            cur.execute(USP_UPDATEEMAILPROCESSSTATUS,CLIENTID,EMAILID,int(MONTH_YEARi[0:4]),int(MONTH_YEARi[5:7]))\n                            cur.commit()        \n                            \n                            params = [int(CLIENTID),int(EMAILID),int(MONTH_YEARi[0:4]),int(MONTH_YEARi[5:7])]\n                            df_USP_UPDATEEMAILPROCESSSTATUS = pd.read_sql_query(sql= USP_UPDATEEMAILPROCESSSTATUS, con=cnxn, params=params)\n                            RollBackFlag = df_USP_UPDATEEMAILPROCESSSTATUS['IS_ERROR'][0]\n                            # break\n                                                \n                            ############################\n                            \n                            sqlExecSP = \"{call USP_GET_DATA_FROM_EMAIL_ADD_DELETE(?,?)}\"\n                            Email_ADD_DELETE = cur.execute(sqlExecSP, EMAILID,CLIENTID)\n                            Email_ADD_DELETE = Email_ADD_DELETE.fetchall()\n                            \n                            ############################\n                            # ADD DELETE START HERE    #\n                            ############################\n                            if RollBackFlag == False:\n                                \n                                Request = 0\n                                for each in Email_ADD_DELETE:\n                                    try:\n                                            \n                                        conn_str = (\n                                        r'DRIVER={SQL Server};'\n                                        r'SERVER=NDS-AA-02;'\n                                        r'DATABASE=HPU;'\n                                        r'Trusted_Connection=no;'\n                                        r'UID=RPA;' \n                                        r'PWD=nds1@2020;'\n                                        r'autocommit=True')\n                                        cnxn = pyodbc.connect(conn_str)\n                                        cur = cnxn.cursor()\n                        \n                                        \n                                        MONTH_YEAR = each[0]\n                                        First_Name = each[1]\n                                        Last_Name = each[2]\n                                        SSN = each[3]\n                                        DOB = each[4]\n                                        Effective_Date = each[5]\n                                        Date_Deleted = each[6]\n                                        Status = each[7]\n                                        Address = each[8]\n                                        City = each[9]\n                                        State = each[10]\n                                        ZipCode = each[11]\n                                        \n        \n                      \n                                        sqlExecSP = \"{call USP_CHECK_DRIVER_DUPLICATION(?,?,?,?,?)}\"\n                                        Is_Driver_Duplicate = cur.execute(sqlExecSP, CLIENTID, First_Name, Last_Name,SSN, DOB)\n                                        Is_Driver_Duplicate = Is_Driver_Duplicate.fetchall()\n                                        \n                        \n                                        #For add new driver \n                                        #if len(Is_Driver_Duplicate) == 0  and (len(Effective_Date) > 5 and Date_Deleted is None) and (Status.lower() != 'delete'):\n                                        if len(Is_Driver_Duplicate) == 0  and (Effective_Date is not None and Date_Deleted is None) and (Status.lower() != 'delete'):\n                                            sqlExecSP2 = \"{call USP_INSERT_ADD_ADD_DELETE(?,?,?,?,?,?,?,?,?,?,?,?)}\"\n                                            cur.execute(sqlExecSP2, CLIENTID, First_Name, Last_Name,SSN, DOB, Effective_Date, Status, Address, City, State, ZipCode, EMAILID)\n                                            cur.commit()    \n                                            \n                                            #Age Calculate\n                                            sqlExecSP9 = \"{call USP_AGE_CALCULATE(?,?)}\"\n                                            cur.execute(sqlExecSP9, EMAILID, CLIENTID)\n                                            cur.commit()    \n                                            \n                                            \n                                            #USP_CALCULATE_RETRO_ACTIVE_DAYS\n                                            USP_CALCULATE_RETRO_ACTIVE_DAYS = \"{call USP_CALCULATE_RETRO_ACTIVE_DAYS(?,?,?)}\"\n                                            cur.execute(USP_CALCULATE_RETRO_ACTIVE_DAYS, RetroDate, CLIENTID,EMAILID)\n                                            cur.commit()    \n                                                                                    \n                                            \n                                        #For DELETE EXISTING driver     \n                                        elif len(Is_Driver_Duplicate) > 0 and (Date_Deleted is not None):\n                                            sqlExecSP3 = \"{call USP_UPDATE_DELETE_ADD_DELETE(?,?,?,?,?,?,?)}\"\n                                            cur.execute(sqlExecSP3, CLIENTID, First_Name, Last_Name,SSN, DOB, EMAILID,Date_Deleted)\n                                            cur.commit()    \n                                            # print(each)\n                                            \n                                            #USP_CALCULATE_RETRO_ACTIVE_DAYS\n                                            sqlExecSP10 = \"{call USP_CALCULATE_RETRO_ACTIVE_DAYS(?,?,?)}\"\n                                            cur.execute(sqlExecSP10,RetroDate, CLIENTID,EMAILID)\n                                            cur.commit()    \n                                            \n                                            \n                                        #delete request but driver not in database    \n                                        elif len(Is_Driver_Duplicate) == 0 and (Effective_Date is not None and Date_Deleted is not None):\n                                            sqlExecSP4 = \"{call USP_INSERT_ERRORLOG_DELETE_REQUEST_BUT_DRIVER_NOT_IN_DB(?,?,?,?,?,?,?,?)}\"\n                                            cur.execute(sqlExecSP4, CLIENTID, First_Name, Last_Name,SSN, DOB,Effective_Date,Status, EMAILID)\n                                            cur.commit()    \n                                            \n                                            \n                                            # DriverStatus = \"ADD/Delete\" or DriverStatus = \"ADD/DELETE\" or DriverStatus = \"add/delete\" or DriverStatus.Contains(\"Add/Delete\")\n                                            if Status.lower() == \"add/delete\":\n                                                print(Status)\n                                                sqlExecSP2 = \"{call USP_INSERT_ADD_ADD_DELETE(?,?,?,?,?,?,?,?,?,?,?,?)}\"\n                                                cur.execute(sqlExecSP2, CLIENTID, First_Name, Last_Name,SSN, DOB, Effective_Date, Status, Address, City, State, ZipCode, EMAILID)\n                                                cur.commit()    \n                                                \n                                                #Age Calculate\n                                                sqlExecSP9 = \"{call USP_AGE_CALCULATE(?,?)}\"\n                                                cur.execute(sqlExecSP9, EMAILID, CLIENTID)\n                                                cur.commit()    \n                                                \n                                                \n                                                #USP_CALCULATE_RETRO_ACTIVE_DAYS\n                                                USP_CALCULATE_RETRO_ACTIVE_DAYS = \"{call USP_CALCULATE_RETRO_ACTIVE_DAYS(?,?,?)}\"\n                                                cur.execute(USP_CALCULATE_RETRO_ACTIVE_DAYS, RetroDate, CLIENTID,EMAILID)\n                                                cur.commit()    \n                                                \n                                                \n                                        #DUPLICATION   \n                                        elif len(Is_Driver_Duplicate) > 0 and (Effective_Date is not None and Date_Deleted is None):\n                                            \n                                            for i in Is_Driver_Duplicate:  \n                                        \n                                                \n                                                if First_Name == i[4] and Last_Name == i[5]:\n                                                    try:     \n                                                        cnxn = pyodbc.connect(conn_str)\n                                                        cur = cnxn.cursor()\n                                                        TodayDate = datetime.now()\n                                                        for date in Is_Driver_Duplicate:\n                                                            INSERTDATE = i[19]\n                                                            \n                                                        if str(TodayDate)[0:10] == INSERTDATE:\n                                                            sqlExecSP5 = \"{call [USP_INSERT_ERRORLOG_SAME_DAY_DUPLICATE](?,?,?,?,?,?,?,?)}\"\n                                                            cur.execute(sqlExecSP5, CLIENTID, First_Name, Last_Name,SSN, DOB,Effective_Date,Status, EMAILID)\n                                                            cur.commit()    \n                                                            # print(\"same day duplicate\")    \n                                                        elif str(TodayDate)[5:7] == INSERTDATE[5:7]:\n                                                            sqlExecSP6 = \"{call USP_INSERT_ERRORLOG_ADD_SAME_MONTH_DUPLICATE(?,?,?,?,?,?,?,?)}\"\n                                                            cur.execute(sqlExecSP6, CLIENTID, First_Name, Last_Name,SSN, DOB,Effective_Date,Status, EMAILID)\n                                                            cur.commit()  \n                                                            \n                                                        elif str(TodayDate)[5:7] != INSERTDATE[5:7]:           \n                                                            sqlExecSP7 = \"{call USP_INSERT_ERRORLOG_ADD_LAST_MONTH_DUPLICATE(?,?,?,?,?,?,?,?)}\"\n                                                            cur.execute(sqlExecSP7, CLIENTID, First_Name, Last_Name,SSN, DOB,Effective_Date,Status, EMAILID)\n                                                            cur.commit()  \n                                                    except Exception:\n                                                                                           \n                                                        file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                                        cur.close()\n                                                        cnxn.close() \n                                                    finally:\n                                                        pass\n                                                        \n                                                else:\n                                                    try:                                                            \n                                                        cnxn = pyodbc.connect(conn_str)\n                                                        cur = cnxn.cursor()\n                                                        OLD_STATUS = i[12]\n                                                        DRIVER_ID = i[0]\n                                                        sqlExecSP8 = \"{call USP_UPDATE_DRIVER_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?)}\"\n                                                        cur.execute(sqlExecSP8, CLIENTID,DRIVER_ID, First_Name, Last_Name,SSN, DOB,Effective_Date,OLD_STATUS,Address, City, State, ZipCode, EMAILID)                \n                                                        cur.commit()    \n                                                        \n                                                        #Age Calculate\n                                                        sqlExecSP9 = \"{call USP_AGE_CALCULATE(?,?)}\"\n                                                        cur.execute(sqlExecSP9, EMAILID, CLIENTID)\n                                                        cur.commit()    \n                                                        cur.close()\n                                                        cnxn.close() \n                                                    except Exception:\n                                                        file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                                        cur.close()\n                                                        cnxn.close() \n                                                        \n                                        Request+=1\n                                    \n                                    except Exception:\n                                        file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                        \n                                ############################\n                                # exception msg            #\n                                ############################\n                                if Request !=0:    \n                                    try:          \n                                        cnxn = pyodbc.connect(conn_str)\n                                        cur = cnxn.cursor()\n                                        USP_ERRORDATA = \" { call USP_ERRORDATA (?,?,?,?,?)}\"\n                                        cur.execute(USP_ERRORDATA, CLIENTID, EMAILID, emailSender,MONTH_YEARi,Attachment)\n                                        cur.commit()    \n                \n                                        USP_ADD_DELETE_ALERT_MAIL_SentMail = \"{ call USP_ADD_DELETE_ALERT_MAIL_SentMail(?,?,?,?,?)}\"\n                                        cur.execute(USP_ADD_DELETE_ALERT_MAIL_SentMail, CLIENTID, EMAILID, emailSender,MONTH_YEARi,Attachment)\n                                        cur.commit()    \n                                   \n                                        USP_IS_EXCLUDED_STATE = \"{ call USP_IS_EXCLUDED_STATE(?,?)}\"\n                                        cur.execute(USP_IS_EXCLUDED_STATE, CLIENTID, EMAILID)\n                                        cur.commit()   \n                                        cur.close()\n                                        cnxn.close()\n                                    except:\n                                          file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                          cur.close()\n                                          cnxn.close()     \n                                    \n                                    \n\n                            else:\n                                try:                                        \n                                    print(\"Roll Back Error\")  \n                                    cnxn = pyodbc.connect(conn_str)\n                                    cur = cnxn.cursor()\n                                    USP_InvalidCensusMonthYear = \"{ call USP_InvalidCensusMonthYear (?,?,?,?,?)}\"\n                                    cur.execute(USP_InvalidCensusMonthYear, CLIENTID, EMAILID, emailSender,MONTH_YEARi,Attachment)\n                                    cur.commit()   \n                                    cur.close()\n                                    cnxn.close()    \n\n                                except Exception:\n                                    file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                    cur.close()\n                                    cnxn.close()    \n\n        \n                    else:\n    \n                        if PolicyNumberNotMatching != 'NO':                            \n                            print('Policy Number not found')\n                            try:\n                                cnxn = pyodbc.connect(conn_str)\n                                cur = cnxn.cursor()\n                \n                                SENT_MONTH_YEAR = MONTH_YEARi\n                                USP_PolicyNumberNotFound = \"{call USP_PolicyNumberNotFound (?,?,?,?,?,?)}\"\n                                cur.execute(USP_PolicyNumberNotFound, CLIENTID, SENT_MONTH_YEAR, EMAILID, IN_ATTACHMENT_ID, emailSender, Attachment)                \n                                cur.commit()   \n                            \n                            except Exception:\n                                file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                cur.close()\n                                cnxn.close()    \n\n                else:\n                    try:                            \n                        print(\"Census Month Not Found\")\n                        cnxn = pyodbc.connect(conn_str)\n                        cur = cnxn.cursor()\n                        USP_NoCensusMonthYear = \" { call USP_NoCensusMonthYear (?,?,?,?)}\"\n                        cur.execute(USP_NoCensusMonthYear, CLIENTID, EMAILID, emailSender,Attachment)\n                        cur.commit()  \n                        cur.close()\n                        cnxn.close()\n                    except Exception:\n                        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                        cur.close()\n                        cnxn.close()\n                    \n                        \n            else:              \n                try:                        \n                    print('Other file format not excel')\n                    cnxn = pyodbc.connect(conn_str)\n                    cur = cnxn.cursor()\n                    USP_UnidentifiedFormat = \" { call USP_UnidentifiedFormat (?,?,?,?)}\"\n                    cur.execute(USP_UnidentifiedFormat, CLIENTID, EMAILID, emailSender,Attachment)\n                    cur.commit()    \n                    cur.close()\n                    cnxn.close()\n                except Exception:\n                    file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                    cur.close()\n                    cnxn.close()\n\ntry:        \n    cur.close()\n    cnxn.close()    \n    file_object.close()\nexcept:\n    pass\n                          \n"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"4ff0c409-d978-40c0-921d-b4b2b7e408d2","commandName":"python.commands.executeScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default1"}}]},{"uid":"b0690210-a6cc-4264-a805-b445571f6c61","commandName":"runTask","packageName":"TaskBot","disabled":false,"attributes":[{"name":"taskbot","value":{"type":"TASKBOT","taskbotInput":{"type":"DICTIONARY","dictionary":[]},"taskbotFile":{"type":"FILE","string":"repository:///Automation%20Anywhere/Bots/SendException"}}},{"name":"repeatOption","value":{"type":"STRING","string":"DO_NOT_REPEAT"}},{"name":"delayNextRepetition","value":{"type":"BOOLEAN","boolean":false}},{"name":"continueOnError","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"ad62cef4-9f9b-4786-8223-3f18851684c0","commandName":"messageBox","packageName":"MessageBox","disabled":false,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","string":"Vijay"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"c4e57b58-dd48-4a4d-a1cc-6b69d8070855","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Defaultcensus"}},{"name":"scriptOption","value":{"type":"STRING","string":"FILE"}},{"name":"file","value":{"type":"FILE","string":"file:///D:/vijay/Census_Gen_File.py"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"18555f45-c935-47e0-b483-68fe95a03cf4","commandName":"python.commands.executeFunction","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Defaultcensus"}},{"name":"functionName","value":{"type":"STRING","string":"CensusGenerationFun"}}]},{"uid":"7ac6c977-84a9-47c6-b6e0-34e34dde4218","commandName":"messageBox","packageName":"MessageBox","disabled":false,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","string":"end"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"be4dfb1a-0e74-4c65-a500-2e465ce1d927","commandName":"try","packageName":"ErrorHandler","disabled":false,"children":[{"uid":"62298dbe-48f2-4f42-b8ad-e44e01635a02","commandName":"runTask","packageName":"TaskBot","disabled":false,"attributes":[{"name":"taskbot","value":{"type":"TASKBOT","taskbotInput":{"type":"DICTIONARY","dictionary":[]},"taskbotFile":{"type":"FILE","string":"repository:///Automation%20Anywhere/Bots/Sample%20bots/Send_Census_Email_31_Oct"}}},{"name":"repeatOption","value":{"type":"STRING","string":"DO_NOT_REPEAT"}},{"name":"delayNextRepetition","value":{"type":"BOOLEAN","boolean":false}},{"name":"continueOnError","value":{"type":"BOOLEAN","boolean":false}}]}],"branches":[{"uid":"17b44a2c-f85d-4094-9d95-ad73bc57689e","commandName":"catch","packageName":"ErrorHandler","disabled":false,"children":[],"attributes":[{"name":"exceptionType","value":{"type":"EXCEPTION","exceptionName":"BotException","packageName":"ErrorHandler"}}]}]}],"branches":[{"uid":"82cd773f-b1ea-4928-880d-78ed88a411f7","commandName":"else","packageName":"If","disabled":false,"children":[]}],"attributes":[{"name":"condition","attributes":[{"name":"variable","value":{"type":"NUMBER","expression":"$EMAIL_Record{CLIENTID}$"}},{"name":"operator","value":{"type":"STRING","string":"GT"}},{"name":"value","value":{"type":"NUMBER","number":"1"}}],"value":{"type":"CONDITIONAL","conditionalName":"numberVariable","packageName":"Number"}}]}],"attributes":[{"name":"loopType","value":{"type":"STRING","string":"ITERATOR"}},{"name":"iterator","returnTo":{"type":"VARIABLE","variableName":"EMAIL_Record"},"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}}],"value":{"type":"ITERATOR","iteratorName":"iterators.resultset","packageName":"Database"}}]}],"attributes":[{"name":"loopType","value":{"type":"STRING","string":"ITERATOR"}},{"name":"iterator","returnTo":{"type":"VARIABLE","variableName":"DB_Record"},"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}}],"value":{"type":"ITERATOR","iteratorName":"iterators.resultset","packageName":"Database"}}]}],"attributes":[{"name":"loopType","value":{"type":"STRING","string":"ITERATOR"}},{"name":"iterator","returnTo":{"type":"VARIABLE","variableName":"UnReadMail"},"attributes":[{"name":"sessionName","value":{"type":"STRING","string":"EmailSession"}},{"name":"readStatus","value":{"type":"STRING","string":"UNREAD"}},{"name":"folder","value":{"type":"STRING","string":"Inbox"}},{"name":"subject","value":{"type":"STRING","string":""}},{"name":"from","value":{"type":"STRING","string":""}},{"name":"messageFormat","value":{"type":"STRING","string":"HTML"}}],"value":{"type":"ITERATOR","iteratorName":"loop.iterators.email","packageName":"Email"}}]}],"variables":[{"name":"prompt-assignment","description":"A variable you can use for assignments","type":"STRING","subtype":"UNDEFINED","readOnly":false,"input":false,"output":false},{"name":"UnReadMail","description":"","type":"DICTIONARY","readOnly":false,"input":false,"output":false,"subtype":"STRING","defaultValue":{"type":"DICTIONARY","dictionary":[]}},{"name":"DB_Record","description":"","type":"RECORD","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"RECORD","record":{"schema":[],"values":[]}}},{"name":"EmailLogID1","description":"","type":"NUMBER","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"NUMBER","number":"0"}},{"name":"EMAIL_Record","description":"","type":"RECORD","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"RECORD","record":{"schema":[],"values":[]}}},{"name":"EmailLogID","description":"","type":"DICTIONARY","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"DICTIONARY","dictionary":[]}},{"name":"MASTER_RECORD","description":"","type":"RECORD","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"RECORD","record":{"schema":[],"values":[]}}},{"name":"EachFile","description":"","type":"DICTIONARY","readOnly":false,"input":false,"output":false,"subtype":"STRING","defaultValue":{"type":"DICTIONARY","dictionary":[]}},{"name":"download_path","description":"","type":"STRING","readOnly":false,"input":false,"output":false,"defaultValue":{"type":"STRING","string":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$"}},{"name":"download_path2","description":"","type":"STRING","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"STRING","string":""}},{"name":"createfolder2","description":"","type":"STRING","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"STRING","string":""}}],"breakpoints":[],"packages":[{"name":"Database","version":"2.1.0-20200913-060112"},{"name":"Email","version":"3.0.0-20200901-105426"},{"name":"ErrorHandler","version":"2.1.0-20200831-031055"},{"name":"Folder","version":"2.2.0-20200831-031100"},{"name":"If","version":"2.1.0-20200825-071156"},{"name":"Loop","version":"2.1.0-20200831-031540"},{"name":"MessageBox","version":"2.1.0-20200831-031541"},{"name":"Number","version":"2.1.0-20200831-031551"},{"name":"Python","version":"2.1.0-20200831-031850"},{"name":"String","version":"3.1.0-20200831-031943"},{"name":"TaskBot","version":"2.0.1-20200907-072949"}],"workItemTemplateName":null}