{"triggers":[],"nodes":[{"uid":"a4586102-ba83-4757-bf3c-3cef581e126c","commandName":"connect","packageName":"Database","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"connectionMode","value":{"type":"STRING","string":"USER"}},{"name":"databaseProvider","value":{"type":"STRING","string":"SQLOLEDB.1"}},{"name":"server","value":{"type":"STRING","string":"NDS-AA-02"}},{"name":"database","value":{"type":"STRING","string":"HPU"}},{"name":"user","value":{"type":"STRING","string":"RPA"}},{"name":"auth","value":{"type":"STRING","string":"nds1@2020"}},{"name":"instance","value":{"type":"STRING","string":""}},{"name":"isUserDefinedDriver","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"c08f05a0-b531-45ec-a0d0-81fafdaad6c7","commandName":"emailConnect","packageName":"Email","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"EmailSession"}},{"name":"serverType","value":{"type":"STRING","string":"OUTLOOK"}}]},{"uid":"9f8f90cd-948b-4676-a6a9-53fcb5260e52","commandName":"loop.commands.start","packageName":"Loop","disabled":false,"children":[{"uid":"1470a5ba-a16f-4bff-bb64-97b065402db2","commandName":"store","packageName":"Database","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"query","value":{"type":"STRING","string":"USP_InsertEmailLog"}},{"name":"entryList","value":{"type":"LIST","list":[{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":""}},{"key":"parametervalue","value":{"type":"STRING","expression":"$UnReadMail{emailSubject}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"VARCHAR"}}]},{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":""}},{"key":"parametervalue","value":{"type":"STRING","expression":"$UnReadMail{emailMessage}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"VARCHAR"}}]},{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":""}},{"key":"parametervalue","value":{"type":"STRING","expression":"$UnReadMail{emailFrom}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"VARCHAR"}}]}]}},{"name":"doExport","value":{"type":"BOOLEAN","boolean":false}}],"returnTo":{"type":"VARIABLE","variableName":"EmailLogID"}},{"uid":"8f5e6627-863d-4da7-a116-76eb1553fc04","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"\n\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Oct 24 15:09:40 2020\n\n@author: dmohanty\n\"\"\"\nimport pandas as pd\nimport pyodbc \n\n\n\n\nconn_str = (\n    r'DRIVER={SQL Server};'\n    r'SERVER=NDS-AA-02;'\n    r'DATABASE=HPU;'\n    r'Trusted_Connection=no;'\n    r'UID=RPA;'\n    r'PWD=nds1@2020;'\n    r'autocommit=True'\n)\n\ndef ClassifySenderEmail():\n    #conhdr = pyodbc.connect(conn_str)\n    cnxn = pyodbc.connect(conn_str)\n    sqlExecSP=\"{call USP_GetMailsToBeClassifiedForClient }\"\n    dfMailListToBeClassified = pd.read_sql_query(sql=sqlExecSP, con=cnxn)\n    \n    for rowclientindex in dfMailListToBeClassified.index:\n        print(rowclientindex, dfMailListToBeClassified['ID'][rowclientindex],dfMailListToBeClassified['FROM_EMAIL_ADDRESS'][rowclientindex],dfMailListToBeClassified['SUBJECT'][rowclientindex])\n        inemailid=int(dfMailListToBeClassified['ID'][rowclientindex])\n        senderemailaddress=dfMailListToBeClassified['FROM_EMAIL_ADDRESS'][rowclientindex]\n        receivedmailsubjectbody=dfMailListToBeClassified['SUBJECT'][rowclientindex]+' '+dfMailListToBeClassified['MAIL_BODY'][rowclientindex]\n        #cnxn = pyodbc.connect(conn_str)\n        outputmsg=''\n        ismailclassified=False\n        classifiedclientid=0\n        classifiedclientname=''\n        sqlExecSP=\"{call USP_GetClientListFromIncomingEmailId (?)}\"\n        params = (senderemailaddress,)\n        dfClientIncomingEmails = pd.read_sql_query(sql=sqlExecSP, con=cnxn, params=params)\n        #print (dfClientIncomingEmails)\n        #print( len(dfClientIncomingEmails.index))\n        if(dfClientIncomingEmails.shape[0] > 0):\n            if(dfClientIncomingEmails.shape[0] > 1):\n                #cnxn = pyodbc.connect(conn_str)\n                sqlExecSP=\"{call USP_GetCrosswalkKeyListFromIncomingEmailId (?)}\"\n                params = (senderemailaddress,)\n                dfClientCrosswalkKeywords = pd.read_sql_query(sql=sqlExecSP, con=cnxn, params=params)\n                #print (dfClientIncomingEmails)\n                #print( len(dfClientCrosswalkKeywords.index))\n                formattedmailsubjectbody=receivedmailsubjectbody.upper().replace(\" \",\"\")\n                for rowindex in dfClientCrosswalkKeywords.index:\n                    #print(rowindex, dfClientCrosswalkKeywords['MAIL_KEY_WORD'][rowindex],dfClientCrosswalkKeywords['CLIENT_ID'][rowindex],dfClientCrosswalkKeywords['CLIENT_NAME'][rowindex])\n                    formattedkeyword=dfClientCrosswalkKeywords['MAIL_KEY_WORD'][rowindex]\n                    formattedkeyword=formattedkeyword.upper().replace(\" \",\"\")\n                    if formattedkeyword in formattedmailsubjectbody:\n                        outputmsg='2-Mail classiifed successfully'\n                        ismailclassified=True\n                        classifiedclientid= dfClientCrosswalkKeywords['CLIENT_ID'][rowindex]\n                        classifiedclientname=dfClientCrosswalkKeywords['CLIENT_NAME'][rowindex]\n                        break\n                if ismailclassified == False :\n                    outputmsg='4-Mail could not be classified. keyword is not matching'\n                \n            else:\n                outputmsg='1-Mail classiifed successfully'\n                ismailclassified=True\n                classifiedclientid= dfClientIncomingEmails['CLIENT_ID'][0]\n                classifiedclientname=dfClientIncomingEmails['CLIENT_NAME'][0]      \n        else:\n            outputmsg='3-Mail could not be classified. Sender email id s not found in database'\n        #cnxnnew = pyodbc.connect(conn_str)\n        cur = cnxn.cursor()\n        sqlExecSP=\"{call USP_UPDATEMAILCLASSIFICATIONCLIENTIDNew (?,?,?,?)}\"\n        cur.execute(sqlExecSP,int(inemailid),senderemailaddress,int(classifiedclientid),outputmsg)\n        cnxn.commit()\n        #return (OUT_OUTPUT_MSG,OUT_IS_MAIL_CLASSIFIED,OUT_CLASSIFIED_CLIENT_ID,OUT_CLASSIFIED_CLIENT_NAME)\n    \n    \n\n\nClassifySenderEmail()\n# print('Classification program processed successfully')\n"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"19acecd0-d5b2-43b0-9a21-d3c3f6610c72","commandName":"python.commands.executeScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"string":"Default","type":"STRING"}}]},{"uid":"590fc13d-6798-473c-afba-fe4929abd092","commandName":"loop.commands.start","packageName":"Loop","disabled":false,"children":[{"uid":"5a36660f-3934-4e63-a1ee-6febb01267c3","commandName":"assignToNumber","packageName":"Number","disabled":false,"attributes":[{"name":"input","value":{"type":"NUMBER","expression":"$DB_Record{ID}$"}}],"returnTo":{"type":"VARIABLE","variableName":"EmailLogID1"}},{"uid":"24c26071-e9a9-4b01-b51b-af78d762c13e","commandName":"store","packageName":"Database","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"query","value":{"type":"STRING","string":"USP_GetClientIDFromEmailLog"}},{"name":"entryList","value":{"type":"LIST","list":[{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":"@ID"}},{"key":"parametervalue","value":{"type":"STRING","expression":"$DB_Record{ID}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"INTEGER"}}]}]}},{"name":"doExport","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"636e2e53-d147-42fe-810f-78dbf9249bb8","commandName":"loop.commands.start","packageName":"Loop","disabled":false,"children":[{"uid":"ce3cd1fd-19f4-4368-b79a-d79bf46b89ab","commandName":"if","packageName":"If","disabled":false,"children":[{"uid":"cc92a3e4-2bb3-4eb6-b81e-c761472b0fab","commandName":"messageBox","packageName":"MessageBox","disabled":true,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","expression":"$EMAIL_Record{CLIENTID}$"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"e50a3e04-1527-4d36-9dfa-4789268365f5","commandName":"store","packageName":"Database","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"query","value":{"type":"STRING","string":"USP_GET_CLIENT_DETAIL_MASTER"}},{"name":"entryList","value":{"type":"LIST","list":[{"type":"DICTIONARY","dictionary":[{"key":"inOrOutParamter","value":{"type":"STRING","string":"Input"}},{"key":"parametername","value":{"type":"STRING","string":"@CLIENTID"}},{"key":"parametervalue","value":{"type":"STRING","expression":"$EMAIL_Record{CLIENTID}$"}},{"key":"outputParamType","value":{"type":"STRING","string":"INTEGER"}}]}]}},{"name":"doExport","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"bcf2da01-2db3-4ff5-949d-b59f843da113","commandName":"loop.commands.start","packageName":"Loop","disabled":false,"children":[{"uid":"8aa5148b-2de7-4076-9651-c5091b452324","commandName":"messageBox","packageName":"MessageBox","disabled":true,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"f754c940-a2dc-4fd9-89c0-bb8968ea27f5","commandName":"if","packageName":"If","disabled":false,"children":[{"uid":"9907edc7-cb9c-4d71-89f0-60e4cc2b2244","commandName":"if","packageName":"If","disabled":false,"children":[],"branches":[{"uid":"37729063-6897-4ede-953b-f7e292eaca07","commandName":"else","packageName":"If","disabled":false,"children":[{"uid":"fc595606-9ded-45ab-a990-5a7476ac42fb","commandName":"createFolder","packageName":"Folder","disabled":false,"attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$\\$MASTER_RECORD{\"DownloadFolderName\"}$"}},{"name":"isOverwrite","value":{"type":"BOOLEAN","boolean":false}}]}]}],"attributes":[{"name":"condition","attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$\\$MASTER_RECORD{\"DownloadFolderName\"}$"}},{"name":"waitTimeout","value":{"type":"NUMBER","number":"0"}}],"value":{"type":"CONDITIONAL","conditionalName":"folderExists","packageName":"Folder"}}]},{"uid":"e80ffe35-9f14-4276-a34c-c6886d9ab9af","commandName":"createFolder","packageName":"Folder","disabled":false,"attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$\\$MASTER_RECORD{\"DownloadFolderName\"}$\\$DB_Record{ID}$"}},{"name":"isOverwrite","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"8533edc0-04df-4a32-a25e-317194f9a43f","commandName":"saveAttachment","packageName":"Email","disabled":false,"attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$\\$MASTER_RECORD{\"DownloadFolderName\"}$\\$DB_Record{ID}$"}},{"name":"checkOverrwrite","value":{"type":"BOOLEAN","boolean":true}}]}],"branches":[{"uid":"b98f4a28-5b01-49db-9e94-dabc7d1a181d","commandName":"else","packageName":"If","disabled":false,"children":[{"uid":"a92df520-1e06-49d8-9d3f-4b6447a91f95","commandName":"messageBox","packageName":"MessageBox","disabled":false,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","string":"fOLDER pATH"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]}]}],"attributes":[{"name":"condition","attributes":[{"name":"folderPath","value":{"type":"STRING","expression":"$MASTER_RECORD{\"DOWNLOAD_PATH\"}$"}},{"name":"waitTimeout","value":{"type":"NUMBER","number":"0"}}],"value":{"type":"CONDITIONAL","conditionalName":"folderExists","packageName":"Folder"}}]}],"attributes":[{"name":"loopType","value":{"type":"STRING","string":"ITERATOR"}},{"name":"iterator","returnTo":{"type":"VARIABLE","variableName":"MASTER_RECORD"},"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}}],"value":{"type":"ITERATOR","iteratorName":"iterators.resultset","packageName":"Database"}}]},{"uid":"946f4a0a-8b93-4041-b7af-70a34ed20302","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default1"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"\n# def ADD_DELETE():\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Oct 23 10:13:57 2020\n\n@author: khambarde\n\n\nhttp://nds-aa-01.cyberdyne.ndsinfo.com:8080/#/bots/repository/private/taskbots/24/edit\n\nCLIENTID = CLIENTID\nEMAILID = EMAILID\nFILE_PATH = FILE_PATH\n\n\"\"\"\nimport xlrd\nimport re\nimport pyodbc \nfrom datetime import datetime\nimport pandas as pd\nimport os\nfrom datetime import date\nimport os.path  \ntoday = date.today()\nimport traceback\nfrom datetime import datetime\n\n                                    \ndef Index_First_Name(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'FirstName' in text:\n        \n            if str(sheet.row_values(i)[0]).replace(\" \", \"\") == 'FirstName':\n                 IndexFirstName = 0\n                 \n            elif str(sheet.row_values(i)[1]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 1\n                \n            elif str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'FirstName':\n                IndexFirstName = 9\n            \n            break\n    return IndexFirstName\n    \n\ndef Index_Last_Name(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'LastName' in text:\n        \n            if str(sheet.row_values(i)[1]).replace(\" \", \"\") == 'LastName':\n                 IndexLastName = 1\n                                 \n            elif str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'LastName':\n                IndexLastName = 9\n            \n            break\n    return IndexLastName\n    \n\ndef Index_SSN(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        \n        if 'SSN' in text:\n\n            if str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'SSN':\n                IndexSSN = 9\n            \n            break\n    return IndexSSN        \n        \n\ndef Index_DOB(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'DOB' in text:\n\n            if str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'DOB':\n                IndexDOB = 9\n            \n            break\n    return IndexDOB        \n                    \n\ndef Index_Effective_Date(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'EffectiveDate' in text or 'AddEffectiveDate' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'EffectiveDate' or str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'AddEffectiveDate':\n                IndexEffectiveDate = 9\n            \n            break\n    return IndexEffectiveDate        \n        \n\n\ndef Index_DateDeleted(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'DateDeleted' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'DateDeleted': \n                IndexDateDeleted = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'DateDeleted': \n                IndexDateDeleted = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'DateDeleted':\n                IndexDateDeleted = 12\n            break\n    return IndexDateDeleted      \n\n\ndef Index_Status(sheet):    \n    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'Status' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'Status': \n                IndexStatus = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'Status': \n                IndexStatus = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'Status':\n                IndexStatus = 12\n            break\n    return IndexStatus      \n\n\n\ndef Index_Address(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'Address' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'Address': \n                IndexAddress = 2\n                \n            elif str(sheet.row_values(i)[3]).replace(\" \", \"\") == 'Address': \n                IndexAddress = 3\n                \n            elif str(sheet.row_values(i)[4]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 4\n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 12\n                                    \n            elif str(sheet.row_values(i)[13]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 13\n                \n            elif str(sheet.row_values(i)[14]).replace(\" \", \"\") == 'Address':\n                IndexAddress = 14\n            break\n    return IndexAddress      \n\n\ndef Index_City(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'City' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'City': \n                IndexCity = 2\n                \n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'City':\n                IndexCity = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'City':\n                IndexCity = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'City':\n                IndexCity = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'City':\n                IndexCity = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'City':\n                IndexCity = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'City':\n                IndexCity = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'City':\n                IndexCity = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'City':\n                IndexCity = 12\n                                    \n            elif str(sheet.row_values(i)[13]).replace(\" \", \"\") == 'City':\n                IndexCity = 13\n                \n            elif str(sheet.row_values(i)[14]).replace(\" \", \"\") == 'City':\n                IndexCity = 14\n                \n            elif str(sheet.row_values(i)[15]).replace(\" \", \"\") == 'City':\n                IndexCity = 15\n                \n            elif str(sheet.row_values(i)[16]).replace(\" \", \"\") == 'City':\n                IndexCity = 16\n            break\n    return IndexCity    \n\n\ndef Index_State(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'State' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'State': \n                IndexState = 2\n                \n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'State':\n                IndexState = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'State':\n                IndexState = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'State':\n                IndexState = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'State':\n                IndexState = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'State':\n                IndexState = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'State':\n                IndexState = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'State':\n                IndexState = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'State':\n                IndexState = 12\n                                    \n            elif str(sheet.row_values(i)[13]).replace(\" \", \"\") == 'State':\n                IndexState = 13\n                \n            elif str(sheet.row_values(i)[14]).replace(\" \", \"\") == 'State':\n                IndexState = 14\n                \n            elif str(sheet.row_values(i)[15]).replace(\" \", \"\") == 'State':\n                IndexState = 15\n                \n            elif str(sheet.row_values(i)[16]).replace(\" \", \"\") == 'State':\n                IndexState = 16                \n                            \n            elif str(sheet.row_values(i)[17]).replace(\" \", \"\") == 'State':\n                IndexState = 17\n                \n            elif str(sheet.row_values(i)[18]).replace(\" \", \"\") == 'State':\n                IndexState = 18\n            break\n    return IndexState       \n\n\ndef Index_ZipCode(sheet):    \n    for i in range(sheet.nrows):   \n        text = str(sheet.row_values(i))\n        text = text.strip()\n        text = text.replace(\" \", \"\")\n        \n        if 'ZipCode' in text:\n\n            if  str(sheet.row_values(i)[2]).replace(\" \", \"\") == 'ZipCode': \n                IndexZipCode = 2\n                \n            \n            elif str(sheet.row_values(i)[5]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 5\n            \n            elif str(sheet.row_values(i)[6]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 6\n            \n            elif str(sheet.row_values(i)[7]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 7\n                \n            elif str(sheet.row_values(i)[8]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 8\n            \n            elif str(sheet.row_values(i)[9]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 9\n                \n            elif str(sheet.row_values(i)[10]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 10\n                        \n            elif str(sheet.row_values(i)[11]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 11\n                \n            elif str(sheet.row_values(i)[12]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 12\n                                    \n            elif str(sheet.row_values(i)[13]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 13\n                \n            elif str(sheet.row_values(i)[14]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 14\n                \n            elif str(sheet.row_values(i)[15]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 15\n                \n            elif str(sheet.row_values(i)[16]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 16                \n                            \n            elif str(sheet.row_values(i)[17]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 17\n                \n            elif str(sheet.row_values(i)[18]).replace(\" \", \"\") == 'ZipCode':\n                IndexZipCode = 18\n            break\n    return IndexZipCode       \n\n\ndef First_Name_Line_Number(sheet):\n    LineCount = 1\n    for i in range(sheet.nrows):   \n        try:                \n            text = str(sheet.row_values(i))\n            text = text.strip()\n            text = text.replace(\" \", \"\")\n            \n            if 'FirstName' in text:\n                break\n            LineCount +=1\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    return LineCount\n            \n\ndef CensusDate(sheet):        \n    Census_Date = None\n    fromfile = None\n    for i in range(sheet.nrows):\n        try:                \n            text = str(sheet.row_values(i))\n            text = text.strip()\n            text = text.replace(\" \", \"\")\n            if  'report' in text.lower():                        \n                try:                 \n                    fromfile = 'no' #to check date\n                    Census_Month = r\"\\d{5}\"\n                    prog = re.compile(Census_Month, re.IGNORECASE)\n                    mo = prog.search(text)  \n                    Number = mo.group()        \n                    Census_Date = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(Number) - 2)\n                    break\n                except Exception:\n                   file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n            # else:\n            #     fromfile = 'yes'                                                     \n            #     text = Attachment.strip()\n            #     text = Attachment.strip()\n            #     text = Attachment.replace(\" \", \"\")\n            #     Census_Month = r\"\\d{4}\"\n            #     prog = re.compile(Census_Month, re.IGNORECASE)\n            #     mo = prog.search(Attachment) \n            #     Number =  mo.group()      \n            #     Census_Date = str(Number[0])+str(Number[1])+str(0)+str(1)+str(Number[2])+str(Number[3])\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    return Census_Date, fromfile\n            \n################\ndef RetroActiveDate(CensusMonthDate,CLIENT_EffectiveDate):\n    \n    if fromfile == 'no':\n        try:\n            yymm = str(CensusMonthDate)[0:8] #'2019-11-'\n            dd = str(CLIENT_EffectiveDate)[8:10] #'30'\n            RetroActive = yymm+dd\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    # else:\n    #     try:                            \n    #         print(fromfile)\n    #         yyyy = str(20)+CensusMonthDate[-2:]\n    #         RetroActive = yyyy+str('-')+CensusMonthDate[0:2]+str('-')+str('01')\n    #     except Exception:\n    #         file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    \n    return RetroActive    \n\n\ndef PolicyNumberExtrator(sheet):\n    Policy_Number = None\n    for i in range(sheet.nrows):   \n        try:                \n            print(sheet.row_values(i))\n            text = str(sheet.row_values(i))\n            Policy_Number = ''\n            if 'policy' in text.lower():\n                PolicyNumberPattern = r\"([Q])\\d{4}-OA\\d{2}-\\d{7}([A-Z])\"\n                prog = re.compile(PolicyNumberPattern, re.IGNORECASE)\n                mo = prog.search(text)   \n                if mo is not None:                                \n                    Policy_Number = mo.group()    \n                    POLICY_NO_STATUS = 'POLICY_NUMBER FOUND'\n                else:\n                    POLICY_NO_STATUS = 'POLICY_NUMBER NOT FOUND'\n                break\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n            \n    return Policy_Number, POLICY_NO_STATUS\n        \n\ndef data(i, sheet, EMAILID, CLIENTID):\n    First_Name = None\n    SSN = None\n    Last_Name = None\n    DOB = None\n    Effective_Date = None\n    Date_Deleted = None\n    Status = None\n    Address = None\n    City = None\n    State = None\n    ZipCode = None\n    EMAILID = EMAILID\n    CLIENTID = CLIENTID\n    \n    try:            \n        if str(sheet.row_values(i)[IndexFistName]) != '':\n            First_Name = str(sheet.row_values(i)[IndexFistName])\n                        \n        if str(sheet.row_values(i)[IndexLastName]) != '':\n            Last_Name = str(sheet.row_values(i)[IndexLastName])\n        \n        if str(sheet.row_values(i)[IndexSSN]) != '':   \n            SSN = str(sheet.row_values(i)[IndexSSN])\n            \n        if sheet.row_values(i)[IndexDOB] != '' and len(str(sheet.row_values(i)[IndexDOB])) > 5:\n     \n            DOB = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(sheet.row_values(i)[IndexDOB]) - 2)\n            \n        if sheet.row_values(i)[IndexEffectiveDate] != '' and len(str(sheet.row_values(i)[IndexEffectiveDate])) > 5:  \n            Effective_Date = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(sheet.row_values(i)[IndexEffectiveDate]) - 2)\n            \n        if sheet.row_values(i)[IndexDateDeleted] != '' and len(str(sheet.row_values(i)[IndexDateDeleted])) > 5:  \n            Date_Deleted = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(sheet.row_values(i)[IndexDateDeleted]) - 2)\n            \n        if sheet.row_values(i)[IndexStatus] != '':\n            Status = str(sheet.row_values(i)[IndexStatus])\n            \n        if sheet.row_values(i)[IndexAddress] != '':\n            Address = sheet.row_values(i)[IndexAddress]\n            \n        if sheet.row_values(i)[IndexCity] != '':\n            City = sheet.row_values(i)[IndexCity]\n            \n        if sheet.row_values(i)[IndexState] != '':\n            State = sheet.row_values(i)[IndexState]\n            \n        if sheet.row_values(i)[IndexZipCode] != '':\n            ZipCode = sheet.row_values(i)[IndexZipCode]\n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n        # file_object\n    \n            \n    return First_Name, Last_Name, SSN, DOB, Effective_Date, Date_Deleted, Status, Address, City, State, ZipCode\n\n\ndef DumpData(sheet, EMAILID,CLIENTID):\n    conn_str = (\n    r'DRIVER={SQL Server};'\n    r'SERVER=NDS-AA-02;'\n    r'DATABASE=HPU;'\n    r'Trusted_Connection=no;'\n    r'UID=RPA;'\n    r'PWD=nds1@2020;'\n    r'autocommit=True')\n    cnxn = pyodbc.connect(conn_str)\n    cur = cnxn.cursor()\n    EMAILID = EMAILID\n    CLIENTID = CLIENTID\n\n    \n    cnxn = pyodbc.connect(conn_str)\n    cur = cnxn.cursor()\n    DataCounter = 1\n    for i in range(sheet.nrows):   \n        try:            \n            text = str(sheet.row_values(i))\n            if DataCounter > First_Name_Line_Number(sheet):\n                if 'First Name' not in text or 'Name' not in text:\n                    # print(data(i,sheet))\n                    First_Name, Last_Name, SSN, DOB, Effective_Date, Date_Deleted, Status, Address, City, State, ZipCode = data(i,sheet,EMAILID, CLIENTID)\n                    \n                    sqlExecSP=\"{call USP_INSERT_EMAIL_ADD_DELETE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}\"\n                    cur.execute(sqlExecSP,EMAILID,IN_ATTACHMENT_ID, CLIENTID,MONTH_YEARi, First_Name,Last_Name,SSN,DOB,Effective_Date,Date_Deleted,Status,Address,City,State,ZipCode)\n                    cur.commit()                \n            DataCounter += 1\n        except Exception:\n            file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    cur.close()\n    cnxn.close()\n            \n\n\n###################################\n#Exception\npath = 'D:/HPUBOT_LOG/'\nisdir = os.path.isdir(path)  \n# print(isdir)  \nif isdir == False:\n    os.makedirs(path)\nfile_object  = open(path+\"\\\\\"+str(today)+\".txt\", \"a\") \n\n###################################\nconn_str = (\n    r'DRIVER={SQL Server};'\n    r'SERVER=NDS-AA-02;'\n    r'DATABASE=HPU;'\n    r'Trusted_Connection=no;'\n    r'UID=RPA;'\n    r'PWD=nds1@2020'\n)\ntry:\n    cnxn = pyodbc.connect(conn_str)\n    cur = cnxn.cursor()\n    cnxn = pyodbc.connect(conn_str)\nexcept Exception:\n    file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n\ntry:\n    sqlExecSP=\"{call USP_GetEMailLogID}\"\n    dfMailListToBeClassified = pd.read_sql_query(sql=sqlExecSP, con=cnxn)\nexcept Exception:\n    file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    \ntry:        \n    # EMAILID = int(dfMailListToBeClassified['ID'][0])\n    # CLIENTID = dfMailListToBeClassified['CLIENTID'][0]\n    emailSender = dfMailListToBeClassified['FROM_EMAIL_ADDRESS'][0]\n    EMAILID = 262\n    CLIENTID = 123\n    \nexcept Exception:\n    file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n\n\nif CLIENTID == None:\n    # print('unclassified')\n    try:            \n        USP_UNCLASSIFIEDCLIENTMAIL_SentEmail=\"{call USP_UNCLASSIFIEDCLIENTMAIL_SentEmail (?,?)}\"\n        cur.execute(USP_UNCLASSIFIEDCLIENTMAIL_SentEmail,int(EMAILID),str(emailSender))\n        cur.commit()  \n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\nelse:\n    \n    ###############################\n    try:            \n        CLIENTID = int(CLIENTID)\n        USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n        params = [int(CLIENTID)]\n        dfClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)\n        \n        CLIENT_NAME = dfClientMasterTable['CLIENT_NAME'][0]\n        CLIENT_EMAILID = dfClientMasterTable['CLIENT_EMAILID'][0]\n        DOWNLOAD_PATH = dfClientMasterTable['DOWNLOAD_PATH'][0]\n        Cleint_STATUS = dfClientMasterTable['STATUS'][0]\n        DownloadFolderName = dfClientMasterTable['DownloadFolderName'][0]\n        OA_POLICY_NUMBER = dfClientMasterTable['OA_POLICY_NUMBER'][0]\n        CLIENT_EffectiveDate = dfClientMasterTable['EFFECTIVE_DATE'][0]\n        QBE = dfClientMasterTable['QBE'][0]\n        EXCEL_SHEET_ORDER = dfClientMasterTable['EXCEL_SHEET_ORDER'][0]\n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n        \n    ###################################\n    \n    try:\n        Folder_Path = DOWNLOAD_PATH+'\\\\'+DownloadFolderName+'\\\\'+str(EMAILID)\n        dirs = os.listdir(Folder_Path)\n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    \n    ############################\n    # No Attachment            #\n    ############################   \n    try:\n        if len(dirs) == 0 or dirs is None:                \n            try:\n                USP_NoAttachment = \"{ call USP_NoAttachment (?,?,?)}\"\n                cur.execute(USP_NoAttachment, CLIENTID, EMAILID, emailSender)\n                cur.commit() \n            except Exception:\n                file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    except Exception:\n        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n    \n    else:\n        FileCount = 1    \n        for Attachment in dirs:\n            Attachment = Attachment.lower()\n            if Attachment[-3:] == 'xls' or Attachment[-3:] == 'xls' or Attachment[-4:] == 'xlsx':\n                try:                        \n                    Folder_Path = Folder_Path+'\\\\'+Attachment                        \n                    # a = r'E:\\Midwestern Insurance\\TESTING PYTHON\\1119 All Pro Freight Systems-South - Add-Delete Report November 2019.xlsx'\n                    df = pd.read_excel(Folder_Path)\n                    book = xlrd.open_workbook(Folder_Path)\n                    for sheet in book.sheets():\n                        sheet = book.sheet_by_name(sheet.name)\n                       # print(sheet.name)\n                        #print(sheet.nrows)\n                        break\n                except Exception:\n                    file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                    \n                    \n                ############################\n                # Census Date              #\n                ############################           \n                CensusMonthDate, fromfile = CensusDate(sheet)\n                \n                if CensusMonthDate is not  None:\n                        \n                    if fromfile =='yes':\n                        CensusMonthDatei = str(20)+str(CensusMonthDate[-2:])+str('-')+str(CensusMonthDate[0:2])+str('-')+str('01')\n                        MONTH_YEARi = CensusMonthDatei\n                    else:\n                        MONTH_YEARi = str(CensusMonthDate)[0:10]     \n                        \n                    IN_ATTACHMENT_ID = FileCount\n        \n                    ############################\n                    # Retro Active             #\n                    ############################ \n                    \n                    RetroDate = RetroActiveDate(CensusMonthDate,CLIENT_EffectiveDate)\n                    \n                    \n                    #############################            \n                    # Policy Number from File   #\n                    #############################\n                    \n                    PolicyNumberfromfile = PolicyNumberExtrator(sheet)\n                    \n                    if len(PolicyNumberfromfile[0]) == 19:\n                        USP_VerifyOAPolicyNumber =\"{call USP_VerifyOAPolicyNumber(?,?,?)}\"\n                        params = [int(CLIENTID),PolicyNumberfromfile[0],EMAILID]\n                        dfpolicynumber = pd.read_sql_query(sql= USP_VerifyOAPolicyNumber, params=params, con=cnxn)\n                        if len(dfpolicynumber) > 0:\n                            VerifyClientId = dfpolicynumber['CLIENTID'][0]\n                        \n                            if VerifyClientId == CLIENTID:\n                                cnxn = pyodbc.connect(conn_str)\n                                cur = cnxn.cursor()\n                                cur.execute(\"UPDATE EMAIL_LOG SET VERIFY_POLICY_NO_FROM_MASTER = 'YES', POLICY_NUMBER_AVAILABLE = 'YES' WHERE ID =\"+str(EMAILID))\n                                cur.commit()                \n                        else:\n                            USP_PolicyNumberNotMatching = \"{ call USP_PolicyNumberNotMatching (?,?,?,?,?,?)}\"\n                            cur.execute(USP_PolicyNumberNotMatching, CLIENTID, MONTH_YEARi, EMAILID, IN_ATTACHMENT_ID, emailSender, Attachment)                \n                            cur.commit()  \n                            VerifyClientId = ''\n                            PolicyNumberNotMatching = 'NO'\n                    else:\n                        sqlExecSP12=\"{call USP_IdentifyOAPolicyNumberFromFile(?,?,?)}\"\n                        cur.execute(sqlExecSP12,CLIENTID,PolicyNumberfromfile[0], EMAILID)\n                        cur.commit()    \n                        VerifyClientId = ''\n                        PolicyNumberNotMatching = ''\n                        \n                    ############################\n                    # VERIFIED POLICY          #\n                    ############################ \n                    if VerifyClientId == CLIENTID:\n                        \n                        ############################\n                        # Index init START HERE    #\n                        ############################                                  \n                        IndexFistName = Index_First_Name(sheet)\n                        IndexLastName = Index_Last_Name(sheet)\n                        IndexSSN = Index_SSN(sheet)\n                        IndexDOB = Index_DOB(sheet)\n                        IndexEffectiveDate = Index_Effective_Date(sheet)\n                        IndexDateDeleted = Index_DateDeleted(sheet)\n                        IndexStatus = Index_Status(sheet)\n                        IndexAddress = Index_Address(sheet)\n                        IndexCity = Index_City(sheet)\n                        IndexState = Index_State(sheet)\n                        IndexZipCode = Index_ZipCode(sheet)\n                        \n                        \n                        conn_str = (\n                            r'DRIVER={SQL Server};'\n                            r'SERVER=NDS-AA-02;'\n                            r'DATABASE=HPU;'\n                            r'Trusted_Connection=no;'\n                            r'UID=RPA;'\n                            r'PWD=nds1@2020'\n                        )\n                        cnxn = pyodbc.connect(conn_str)\n                        cur = cnxn.cursor()\n                        \n                        #############################################\n                        # MONTH_YEAR = str(CensusMonthDate)[0:10]                \n                        \n                    \n                                   \n                        if PolicyNumberfromfile[1] == 'POLICY_NUMBER FOUND':\n                            \n                            ############################\n                            # Dump Data START HERE     #\n                            ############################    \n                            DumpData(sheet,EMAILID, CLIENTID)\n                                                    \n                            ###################################################                    \n                            conn_str = (\n                            r'DRIVER={SQL Server};'\n                            r'SERVER=NDS-AA-02;'\n                            r'DATABASE=HPU;'\n                            r'Trusted_Connection=no;'\n                            r'UID=RPA;' \n                            r'PWD=nds1@2020;'\n                            r'autocommit=True')\n                            cnxn = pyodbc.connect(conn_str)\n                            cur = cnxn.cursor()\n                            \n                            #######################################\n                            #Vijay \n                            ChangeStatusToACTIVEDELETED = \"{ call ChangeStatusToACTIVEDELETED (?,?)}\"\n                            cur.execute(ChangeStatusToACTIVEDELETED,int(CLIENTID),MONTH_YEARi)\n                            cur.commit()\n                            \n                            \n                            ############################\n                            # Roll Back START HERE     #\n                            ############################\n                                        \n                            USP_UPDATEEMAILPROCESSSTATUS = \"{ call USP_UPDATEEMAILPROCESSSTATUS (?,?,?,?)}\"\n                            cur.execute(USP_UPDATEEMAILPROCESSSTATUS,CLIENTID,EMAILID,int(MONTH_YEARi[0:4]),int(MONTH_YEARi[5:7]))\n                            cur.commit()        \n                            \n                            params = [int(CLIENTID),int(EMAILID),int(MONTH_YEARi[0:4]),int(MONTH_YEARi[5:7])]\n                            df_USP_UPDATEEMAILPROCESSSTATUS = pd.read_sql_query(sql= USP_UPDATEEMAILPROCESSSTATUS, con=cnxn, params=params)\n                            RollBackFlag = df_USP_UPDATEEMAILPROCESSSTATUS['IS_ERROR'][0]\n                            # break\n                                                \n                            ############################\n                            \n                            sqlExecSP = \"{call USP_GET_DATA_FROM_EMAIL_ADD_DELETE(?,?)}\"\n                            Email_ADD_DELETE = cur.execute(sqlExecSP, EMAILID,CLIENTID)\n                            Email_ADD_DELETE = Email_ADD_DELETE.fetchall()\n                            \n                            ############################\n                            # ADD DELETE START HERE    #\n                            ############################\n                            if RollBackFlag == False:\n                                \n                                Request = 0\n                                for each in Email_ADD_DELETE:\n                                    try:\n                                            \n                                        conn_str = (\n                                        r'DRIVER={SQL Server};'\n                                        r'SERVER=NDS-AA-02;'\n                                        r'DATABASE=HPU;'\n                                        r'Trusted_Connection=no;'\n                                        r'UID=RPA;' \n                                        r'PWD=nds1@2020;'\n                                        r'autocommit=True')\n                                        cnxn = pyodbc.connect(conn_str)\n                                        cur = cnxn.cursor()\n                        \n                                        \n                                        MONTH_YEAR = each[0]\n                                        First_Name = each[1]\n                                        Last_Name = each[2]\n                                        SSN = each[3]\n                                        DOB = each[4]\n                                        Effective_Date = each[5]\n                                        Date_Deleted = each[6]\n                                        Status = each[7]\n                                        Address = each[8]\n                                        City = each[9]\n                                        State = each[10]\n                                        ZipCode = each[11]\n                                        \n        \n                      \n                                        sqlExecSP = \"{call USP_CHECK_DRIVER_DUPLICATION(?,?,?,?,?)}\"\n                                        Is_Driver_Duplicate = cur.execute(sqlExecSP, CLIENTID, First_Name, Last_Name,SSN, DOB)\n                                        Is_Driver_Duplicate = Is_Driver_Duplicate.fetchall()\n                                        \n                        \n                                        #For add new driver \n                                        #if len(Is_Driver_Duplicate) == 0  and (len(Effective_Date) > 5 and Date_Deleted is None) and (Status.lower() != 'delete'):\n                                        if len(Is_Driver_Duplicate) == 0  and (Effective_Date is not None and Date_Deleted is None) and (Status.lower() != 'delete'):\n                                            sqlExecSP2 = \"{call USP_INSERT_ADD_ADD_DELETE(?,?,?,?,?,?,?,?,?,?,?,?)}\"\n                                            cur.execute(sqlExecSP2, CLIENTID, First_Name, Last_Name,SSN, DOB, Effective_Date, Status, Address, City, State, ZipCode, EMAILID)\n                                            cur.commit()    \n                                            \n                                            #Age Calculate\n                                            sqlExecSP9 = \"{call USP_AGE_CALCULATE(?,?)}\"\n                                            cur.execute(sqlExecSP9, EMAILID, CLIENTID)\n                                            cur.commit()    \n                                            \n                                            \n                                            #USP_CALCULATE_RETRO_ACTIVE_DAYS\n                                            USP_CALCULATE_RETRO_ACTIVE_DAYS = \"{call USP_CALCULATE_RETRO_ACTIVE_DAYS(?,?,?)}\"\n                                            cur.execute(USP_CALCULATE_RETRO_ACTIVE_DAYS, RetroDate, CLIENTID,EMAILID)\n                                            cur.commit()    \n                                                                                    \n                                            \n                                        #For DELETE EXISTING driver     \n                                        elif len(Is_Driver_Duplicate) > 0 and (Date_Deleted is not None):\n                                            sqlExecSP3 = \"{call USP_UPDATE_DELETE_ADD_DELETE(?,?,?,?,?,?,?)}\"\n                                            cur.execute(sqlExecSP3, CLIENTID, First_Name, Last_Name,SSN, DOB, EMAILID,Date_Deleted)\n                                            cur.commit()    \n                                            # print(each)\n                                            \n                                            #USP_CALCULATE_RETRO_ACTIVE_DAYS\n                                            sqlExecSP10 = \"{call USP_CALCULATE_RETRO_ACTIVE_DAYS(?,?,?)}\"\n                                            cur.execute(sqlExecSP10,RetroDate, CLIENTID,EMAILID)\n                                            cur.commit()    \n                                            \n                                            \n                                        #delete request but driver not in database    \n                                        elif len(Is_Driver_Duplicate) == 0 and (Effective_Date is not None and Date_Deleted is not None):\n                                            sqlExecSP4 = \"{call USP_INSERT_ERRORLOG_DELETE_REQUEST_BUT_DRIVER_NOT_IN_DB(?,?,?,?,?,?,?,?)}\"\n                                            cur.execute(sqlExecSP4, CLIENTID, First_Name, Last_Name,SSN, DOB,Effective_Date,Status, EMAILID)\n                                            cur.commit()    \n                                            \n                                            \n                                            # DriverStatus = \"ADD/Delete\" or DriverStatus = \"ADD/DELETE\" or DriverStatus = \"add/delete\" or DriverStatus.Contains(\"Add/Delete\")\n                                            if Status.lower() == \"add/delete\":\n                                                print(Status)\n                                                sqlExecSP2 = \"{call USP_INSERT_ADD_ADD_DELETE(?,?,?,?,?,?,?,?,?,?,?,?)}\"\n                                                cur.execute(sqlExecSP2, CLIENTID, First_Name, Last_Name,SSN, DOB, Effective_Date, Status, Address, City, State, ZipCode, EMAILID)\n                                                cur.commit()    \n                                                \n                                                #Age Calculate\n                                                sqlExecSP9 = \"{call USP_AGE_CALCULATE(?,?)}\"\n                                                cur.execute(sqlExecSP9, EMAILID, CLIENTID)\n                                                cur.commit()    \n                                                \n                                                \n                                                #USP_CALCULATE_RETRO_ACTIVE_DAYS\n                                                USP_CALCULATE_RETRO_ACTIVE_DAYS = \"{call USP_CALCULATE_RETRO_ACTIVE_DAYS(?,?,?)}\"\n                                                cur.execute(USP_CALCULATE_RETRO_ACTIVE_DAYS, RetroDate, CLIENTID,EMAILID)\n                                                cur.commit()    \n                                                \n                                                \n                                        #DUPLICATION   \n                                        elif len(Is_Driver_Duplicate) > 0 and (Effective_Date is not None and Date_Deleted is None):\n                                            \n                                            for i in Is_Driver_Duplicate:  \n                                        \n                                                \n                                                if First_Name == i[4] and Last_Name == i[5]:\n                                                    try:     \n                                                        cnxn = pyodbc.connect(conn_str)\n                                                        cur = cnxn.cursor()\n                                                        TodayDate = datetime.now()\n                                                        for date in Is_Driver_Duplicate:\n                                                            INSERTDATE = i[19]\n                                                            \n                                                        if str(TodayDate)[0:10] == INSERTDATE:\n                                                            sqlExecSP5 = \"{call [USP_INSERT_ERRORLOG_SAME_DAY_DUPLICATE](?,?,?,?,?,?,?,?)}\"\n                                                            cur.execute(sqlExecSP5, CLIENTID, First_Name, Last_Name,SSN, DOB,Effective_Date,Status, EMAILID)\n                                                            cur.commit()    \n                                                            # print(\"same day duplicate\")    \n                                                        elif str(TodayDate)[5:7] == INSERTDATE[5:7]:\n                                                            sqlExecSP6 = \"{call USP_INSERT_ERRORLOG_ADD_SAME_MONTH_DUPLICATE(?,?,?,?,?,?,?,?)}\"\n                                                            cur.execute(sqlExecSP6, CLIENTID, First_Name, Last_Name,SSN, DOB,Effective_Date,Status, EMAILID)\n                                                            cur.commit()  \n                                                            \n                                                        elif str(TodayDate)[5:7] != INSERTDATE[5:7]:           \n                                                            sqlExecSP7 = \"{call USP_INSERT_ERRORLOG_ADD_LAST_MONTH_DUPLICATE(?,?,?,?,?,?,?,?)}\"\n                                                            cur.execute(sqlExecSP7, CLIENTID, First_Name, Last_Name,SSN, DOB,Effective_Date,Status, EMAILID)\n                                                            cur.commit()  \n                                                    except Exception:\n                                                                                           \n                                                        file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                                        cur.close()\n                                                        cnxn.close() \n                                                    finally:\n                                                        pass\n                                                        \n                                                else:\n                                                    try:                                                            \n                                                        cnxn = pyodbc.connect(conn_str)\n                                                        cur = cnxn.cursor()\n                                                        OLD_STATUS = i[12]\n                                                        DRIVER_ID = i[0]\n                                                        sqlExecSP8 = \"{call USP_UPDATE_DRIVER_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?)}\"\n                                                        cur.execute(sqlExecSP8, CLIENTID,DRIVER_ID, First_Name, Last_Name,SSN, DOB,Effective_Date,OLD_STATUS,Address, City, State, ZipCode, EMAILID)                \n                                                        cur.commit()    \n                                                        \n                                                        #Age Calculate\n                                                        sqlExecSP9 = \"{call USP_AGE_CALCULATE(?,?)}\"\n                                                        cur.execute(sqlExecSP9, EMAILID, CLIENTID)\n                                                        cur.commit()    \n                                                        cur.close()\n                                                        cnxn.close() \n                                                    except Exception:\n                                                        file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                                        cur.close()\n                                                        cnxn.close() \n                                                        \n                                        Request+=1\n                                    \n                                    except Exception:\n                                        file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                        \n                                ############################\n                                # exception msg            #\n                                ############################\n                                if Request !=0:    \n                                    try:          \n                                        cnxn = pyodbc.connect(conn_str)\n                                        cur = cnxn.cursor()\n                                        USP_ERRORDATA = \" { call USP_ERRORDATA (?,?,?,?,?)}\"\n                                        cur.execute(USP_ERRORDATA, CLIENTID, EMAILID, emailSender,MONTH_YEARi,Attachment)\n                                        cur.commit()    \n                \n                                        USP_ADD_DELETE_ALERT_MAIL_SentMail = \"{ call USP_ADD_DELETE_ALERT_MAIL_SentMail(?,?,?,?,?)}\"\n                                        cur.execute(USP_ADD_DELETE_ALERT_MAIL_SentMail, CLIENTID, EMAILID, emailSender,MONTH_YEARi,Attachment)\n                                        cur.commit()    \n                                   \n                                        USP_IS_EXCLUDED_STATE = \"{ call USP_IS_EXCLUDED_STATE(?,?)}\"\n                                        cur.execute(USP_IS_EXCLUDED_STATE, CLIENTID, EMAILID)\n                                        cur.commit()   \n                                        cur.close()\n                                        cnxn.close()\n                                    except:\n                                          file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                          cur.close()\n                                          cnxn.close()     \n                                    \n                                    \n\n                            else:\n                                try:                                        \n                                    print(\"Roll Back Error\")  \n                                    cnxn = pyodbc.connect(conn_str)\n                                    cur = cnxn.cursor()\n                                    USP_InvalidCensusMonthYear = \"{ call USP_InvalidCensusMonthYear (?,?,?,?,?)}\"\n                                    cur.execute(USP_InvalidCensusMonthYear, CLIENTID, EMAILID, emailSender,MONTH_YEARi,Attachment)\n                                    cur.commit()   \n                                    cur.close()\n                                    cnxn.close()    \n\n                                except Exception:\n                                    file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                    cur.close()\n                                    cnxn.close()    \n\n        \n                    else:\n    \n                        if PolicyNumberNotMatching != 'NO':                            \n                            print('Policy Number not found')\n                            try:\n                                cnxn = pyodbc.connect(conn_str)\n                                cur = cnxn.cursor()\n                \n                                SENT_MONTH_YEAR = MONTH_YEARi\n                                USP_PolicyNumberNotFound = \"{call USP_PolicyNumberNotFound (?,?,?,?,?,?)}\"\n                                cur.execute(USP_PolicyNumberNotFound, CLIENTID, SENT_MONTH_YEAR, EMAILID, IN_ATTACHMENT_ID, emailSender, Attachment)                \n                                cur.commit()   \n                            \n                            except Exception:\n                                file_object.write(str(datetime.now())[0:19]+\"|\"+str(EMAILID)+\"|\"+str(CLIENTID)+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                                cur.close()\n                                cnxn.close()    \n\n                else:\n                    try:                            \n                        print(\"Census Month Not Found\")\n                        cnxn = pyodbc.connect(conn_str)\n                        cur = cnxn.cursor()\n                        USP_NoCensusMonthYear = \" { call USP_NoCensusMonthYear (?,?,?,?)}\"\n                        cur.execute(USP_NoCensusMonthYear, CLIENTID, EMAILID, emailSender,Attachment)\n                        cur.commit()  \n                        cur.close()\n                        cnxn.close()\n                    except Exception:\n                        file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                        cur.close()\n                        cnxn.close()\n                    \n                        \n            else:              \n                try:                        \n                    print('Other file format not excel')\n                    cnxn = pyodbc.connect(conn_str)\n                    cur = cnxn.cursor()\n                    USP_UnidentifiedFormat = \" { call USP_UnidentifiedFormat (?,?,?,?)}\"\n                    cur.execute(USP_UnidentifiedFormat, CLIENTID, EMAILID, emailSender,Attachment)\n                    cur.commit()    \n                    cur.close()\n                    cnxn.close()\n                except Exception:\n                    file_object.write(str(datetime.now())[0:19]+\"|\"+str(traceback.format_exc())+str(\"\\n\"))\n                    cur.close()\n                    cnxn.close()\n\ntry:        \n    cur.close()\n    cnxn.close()    \n    file_object.close()\nexcept:\n    pass\n                          \n\ndef CensusGenerationFun(ClientID_In,InEmailID_In):\n    import xlsxwriter\n    from datetime import datetime\n    import pyodbc \n    import os\n    #from dateutil.parser import parse\n    # Start of Main       \n    ################## SQL SERVER CONNECTION#####################################################################\n    db = pyodbc.connect(\"Driver={SQL Server};\"\n                          \"Server=NDS-AA-02;\"\n                          \"Database=HPU;\"\n                          \"uid=RPA;pwd=nds1@2020;\")\n    cursor = db.cursor()\n    \n    # Client ID##############################\n    ClientID = ClientID_In\n    InEmailID = InEmailID_In\n    try:\n        ########################################\n        # Get dates in diffferent formats\n        cursor.execute(\"{CALL dbo.GET_DATES_IN_DIFF_FORMS(?)}\",ClientID)\n        Date_All = cursor.fetchall()\n        Date_All_Row_0 = Date_All[0]\n        ##############################################\n        MonthOfReport_MMM_YY = Date_All_Row_0[0]\n        MonthOfReport_MMM_yy_Minus_1 = Date_All_Row_0[1]\n        MonthOfReport_MMM_yy_Minus_2 = Date_All_Row_0[2]\n        MonthOfReport_MMM_yy_Minus_3 = Date_All_Row_0[3]\n        MonthOfReport_MM_yy = Date_All_Row_0[4].strip()\n        MonthOfReport_MM_yy_Minus_1 = Date_All_Row_0[5]\n        MonthOfReport_MM_yy_Minus_2 = Date_All_Row_0[6]\n        MonthOfReport_MM_yy_Minus_3 = Date_All_Row_0[7]\n        MonthOfReport_MM_yy_Minus_4 = Date_All_Row_0[8]\n        MonthOfReport_MM_yy_Minus_5 = Date_All_Row_0[9]\n        MonthOfReport_MM_yy_Minus_6 = Date_All_Row_0[10]\n        MonthOfReport_MM_yy_Plus_1 = Date_All_Row_0[11]\n        DATE_OF_REPORT = Date_All_Row_0[12]\n        #DayAndMonthOfReport = Date_All_Row_0[13]\n        DateOfReport_Month_Year_Obj = datetime.strptime(MonthOfReport_MMM_YY,'%Y-%m-%d')\n        DateOfReport_Month_Year = datetime.strftime(DateOfReport_Month_Year_Obj,'%d %b %Y')\n        \n        MonthOfReport_Excel = datetime.strptime(MonthOfReport_MMM_YY,'%Y-%m-%d')\n        MonthOfReport_Minus_1_Excel = datetime.strptime(MonthOfReport_MMM_yy_Minus_1,'%Y-%m-%d')\n        MonthOfReport_Minus_2_Excel = datetime.strptime(MonthOfReport_MMM_yy_Minus_2,'%Y-%m-%d')\n        MonthOfReport_Minus_3_Excel = datetime.strptime(MonthOfReport_MMM_yy_Minus_3,'%Y-%m-%d')\n        ##############################################\n        # Get Client information\n        cursor.execute(\"{CALL dbo.GetClientInfoFromClientID(?)}\",ClientID)\n        Client_info = cursor.fetchall()\n        Client_info_Row_0 = Client_info[0]\n        #######################################\n        PAY_DUE_DATE = Client_info_Row_0[0].strip()\n        REINSTATEMENT_DATE = Client_info_Row_0[1].strip()\n        CENSUS_CUT_OFF_DATE = Client_info_Row_0[2].strip()\n        CENSUS_FOLDER_PATH = Client_info_Row_0[3].strip()\n        CLIENT_STATE = Client_info_Row_0[4].strip()\n        POLICYHOLDER = Client_info_Row_0[5].strip()\n        NAMED_MOTORCARRRIER = Client_info_Row_0[6].strip()\n        OA_POLICY_NUMBER = Client_info_Row_0[7].strip()\n        CL_POLICY = Client_info_Row_0[8].strip()\n        CL_POLICY_NUMBER = Client_info_Row_0[9].strip()\n        OARATE = Client_info_Row_0[10]\n        CLRATE = Client_info_Row_0[11]\n        DUESRATE = Client_info_Row_0[12]\n        CLIENT_EFFECTIVE_DATE = Client_info_Row_0[13]\n        CLIENT_EXPIRATION_DATE = Client_info_Row_0[14]\n        OA_COMMISSION_RATE = Client_info_Row_0[15]\n        CLIENT_INVOICE = Client_info_Row_0[16]\n        INTERNAL_INVOICE = Client_info_Row_0[17]\n        LATE_FEE_AMOUNT = Client_info_Row_0[18]\n        REINSTATEMENT_AMOUNT = Client_info_Row_0[19]\n        CL_COMMISSION_RATE = Client_info_Row_0[20]\n        NAMED_MOTORCARRRIER_PLANE = Client_info_Row_0[21]\n        \n        ADDCOUNT_Final = 0\n        DELETECOUNT_Final = 0\n        ADD_DELETECOUNT_Final = 0\n        DEBITCOUNT_Final = 0 \n        CREDITCOUNT_Final = 0 \n        ##############################################################################\n        def FieldCopyFun(workbook,worksheet):\n        ########### HEADER INFO WRITE ########\n        #######################################\n            Row = \"1\"\n            #####################################\n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('A'+Row, 'POLICYHOLDER',cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_color': 'blue','font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('B'+Row, POLICYHOLDER, cell_format)\n            ######################################\n            Row = \"2\"\n            #################################\n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('A'+Row, 'NAMED MOTORCARRIER',cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('B'+Row, NAMED_MOTORCARRRIER, cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('C'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('D'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('F'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12','align': 'centre'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('G'+Row, 'STATE', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12','align': 'centre'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('H'+Row, CLIENT_STATE, cell_format)\n            \n            ######################################\n            Row = \"3\"\n            #################################\n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('A'+Row, 'OCCUPATIONAL ACCIDENT POLICY NUMBER',cell_format) \n            \n            cell_format = workbook.add_format({'bold': True,'font_color': 'blue','font_size': '12'})\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_left(1)\n            cell_format.set_bg_color('yellow')\n            cell_format.set_font_name('Arial')\n            worksheet.write('B'+Row, OA_POLICY_NUMBER,cell_format) \n            \n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('C'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('D'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_right(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('F'+Row, '', cell_format)\n            \n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12','align': 'centre'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('G'+Row, 'EFFECTIVE',cell_format) \n            \n            \n            CLIENT_EFFECTIVE_DATE_Format = datetime.strptime(CLIENT_EFFECTIVE_DATE,'%Y-%m-%d')                            \n            cell_format = workbook.add_format({'bold': True,'font_color': 'blue','font_size': '12','align': 'centre'})\n            cell_format.set_border(1)\n            cell_format.set_bg_color('yellow')\n            cell_format.set_font_name('Arial')\n            cell_format.set_num_format('mm/dd/yy')\n            worksheet.write('H'+Row, CLIENT_EFFECTIVE_DATE_Format,cell_format) \n            \n            #cell_format = workbook.add_format({'bold': True,'font_color': 'blue','font_size': '12','align': 'centre'})\n            #cell_format.set_border(1)\n            #cell_format.set_bg_color('yellow')\n            #cell_format.set_font_name('Arial')\n            #cell_format.set_num_format('mmm-yy')\n            #worksheet.write('I'+Row, date_time,cell_format)\n            \n            ######################################\n            Row = \"4\"\n            #################################\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_left(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('B'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('C'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('D'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('F'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12','align': 'centre'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('G'+Row, 'EXPIRATION',cell_format) \n            \n            try:\n               CLIENT_EXPIRATION_DATE_Format = datetime.strptime(CLIENT_EXPIRATION_DATE,'%Y-%m-%d')\n            except:\n               CLIENT_EXPIRATION_DATE_Format = ''                             \n            cell_format = workbook.add_format({'bold': True,'font_color': 'blue','font_size': '12','align': 'centre'})\n            cell_format.set_border(1)\n            cell_format.set_bg_color('yellow')\n            cell_format.set_font_name('Arial')\n            cell_format.set_num_format('mm/dd/yy')\n            worksheet.write('H'+Row, CLIENT_EXPIRATION_DATE_Format,cell_format)\n            \n            ######################################\n            Row = \"5\"\n            #################################\n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('A'+Row, 'CONTINGENT LIABILITY',cell_format) \n            \n            cell_format = workbook.add_format({'bold': True,'font_color': 'red','font_size': '12','align': 'centre'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_top(1)\n            cell_format.set_right(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('B'+Row, 'YES/NO?', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('C'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('D'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_color': 'blue','font_size': '12','align': 'centre'})\n            cell_format.set_border(1)\n            cell_format.set_bg_color('yellow')\n            cell_format.set_font_name('Arial')\n            worksheet.write('G'+Row, CL_POLICY,cell_format) \n            \n            ######################################\n            Row = \"6\"\n            #################################\n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('A'+Row, 'CONTINGENT LIABILITY POLICY NUMBER',cell_format) \n            \n            #cell_format = workbook.add_format({'bold': True,'font_color': 'blue','font_size': '12'})\n            #cell_format.set_border(1)\n            #cell_format.set_font_name('Arial')\n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('B'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('C'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('D'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            #worksheet = workbook.add_worksheet()\n            merge_format = workbook.add_format({\n                'bold': 1,\n                'border': 1,\n                'align': 'right',\n                'font_name':'Arial',\n                'font_color':'blue',\n                'font_size': '12'})\n            \n            worksheet.merge_range('F6:G6',CL_POLICY_NUMBER, merge_format)\n            #################################\n            \n            \n            #worksheet.write('F'+Row, 'Q0014-CL18-0027513Q',cell_format)\n            \n            ######################################\n            Row = \"7\"\n            #########################################\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('A'+Row, 'DATE OF MONTHLY REPORT',cell_format) \n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('B'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('C'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('D'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('F'+Row, '', cell_format)\n            \n            \n            #Date3 = '2020-10-27'\n            #DATE_OF_REPORT_Format = datetime.strptime(DATE_OF_REPORT,'%Y-%m-%d')\n            cell_format = workbook.add_format({'bold': True,'font_color': 'blue','font_size': '12'})\n            cell_format.set_border(1)\n            cell_format.set_bg_color('yellow')\n            cell_format.set_font_name('Arial')\n            cell_format.set_num_format('dd-mmm-yy')\n            worksheet.write('G'+Row, DATE_OF_REPORT,cell_format)\n            \n            \n            ######################################\n            Row = \"8\"\n            #########################################\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('A'+Row, 'TOTAL NUMBER OF DRIVERS',cell_format) \n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('B'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('C'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('D'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('E'+Row, '', cell_format)\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '12'})\n            #cell_format.set_bg_color('yellow')\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('F'+Row, '', cell_format)\n            \n            \n            \n            ######################################\n            Row = str(int(Row) + 2)\n            #########################################\n            cell_format = workbook.add_format({'bold': True,'font_size': '11','font_color': 'blue'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('A'+Row, 'FIRSTNAME',cell_format)\n            worksheet.write('B'+Row, 'LASTNAME',cell_format)\n            worksheet.write('C'+Row, 'APPLICANT SSN',cell_format)\n            worksheet.write('D'+Row, 'DOB',cell_format)\n            worksheet.write('E'+Row, 'EFFDATE',cell_format)\n            worksheet.write('F'+Row, 'TERMDATE',cell_format)\n            worksheet.write('G'+Row, 'STATE',cell_format)\n            worksheet.write('H'+Row, 'RFI / RF',cell_format)\n            worksheet.write('I'+Row, '#DRIVERS',cell_format)\n            worksheet.write('J'+Row, 'STATUS',cell_format)\n            worksheet.write('K'+Row, 'MONTH',cell_format)\n            worksheet.write('L'+Row, 'TOTALRATE',cell_format)\n            worksheet.write('M'+Row, 'OARATE',cell_format)\n            worksheet.write('N'+Row, 'CLRATE',cell_format)\n            worksheet.write('O'+Row, 'DUES',cell_format)\n            \n            # ADD ACTIVE DRIVERS  ################################\n            # Get active drivers\n            DataRowFirst = str(int(Row) + 1)\n            ADDCOUNT = 0\n            DELETECOUNT = 0\n            ADD_DELETECOUNT = 0\n            DEBITCOUNT = 0 \n            CREDITCOUNT = 0\n            TOTAL_DRIVER_COUNT = 0 \n            cursor.execute(\"{CALL dbo.GetACTIVEDriversFromClientID(?)}\",ClientID)\n            Active_Drivers = cursor.fetchall()\n            for i in range(0,len(Active_Drivers),1):\n                Row = str(int(Row) + 1)\n                Active_Drivers_Row_i = Active_Drivers[i]\n                FirstName = Active_Drivers_Row_i[0]\n                LastName = Active_Drivers_Row_i[1]\n                DRIVER_SSN = Active_Drivers_Row_i[2]\n                DRIVER_STATE = Active_Drivers_Row_i[3]\n                RFI_RF = Active_Drivers_Row_i[4]\n                DRIVER_DOB = Active_Drivers_Row_i[5]\n                DRIVER_EFF_DATE = Active_Drivers_Row_i[6]\n                \n                DRIVER_DOB_Excel = datetime.strptime(DRIVER_DOB,'%Y-%m-%d')\n                DRIVER_EFF_DATE_Excel = datetime.strptime(DRIVER_EFF_DATE,'%Y-%m-%d')\n                \n                DRIVER_STATUS = 'ACTIVE'\n                No_of_Drivers = 1\n                OARATE_Final = OARATE\n                CLRATE_Final = CLRATE\n                DUESRATE_Final = DUESRATE\n                Total_Rate = int(OARATE_Final)+int(CLRATE_Final)+int(DUESRATE_Final)\n                \n                cell_format = workbook.add_format({'font_size': '11'})\n                cell_format.set_font_name('Arial')\n                worksheet.write('A'+Row, FirstName,cell_format) # First Name\n                worksheet.write('B'+Row, LastName,cell_format) # Last Name\n                \n                cell_format = workbook.add_format({'font_size': '11','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                \n                worksheet.write('C'+Row, DRIVER_SSN,cell_format) # SSN\n                worksheet.write('G'+Row, DRIVER_STATE,cell_format) # STATE\n                worksheet.write('H'+Row, RFI_RF,cell_format) # RFI / RF\n                worksheet.write('I'+Row, No_of_Drivers,cell_format) # NO of DRIVERS\n                TOTAL_DRIVER_COUNT = TOTAL_DRIVER_COUNT + No_of_Drivers\n                worksheet.write('J'+Row, DRIVER_STATUS,cell_format) # STATUS\n                \n                cell_format = workbook.add_format({'font_size': '11','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                cell_format.set_num_format('mm/dd/yy')\n                worksheet.write('D'+Row, DRIVER_DOB_Excel,cell_format) # DOB\n                worksheet.write('E'+Row, DRIVER_EFF_DATE_Excel,cell_format) # EFFDATE\n                worksheet.write('F'+Row, '',cell_format) # TERMDATE\n               \n                \n                \n                cell_format = workbook.add_format({'num_format': '#,##0.00','align': 'right'})\n                cell_format.set_font_name('Arial')\n                worksheet.write('L'+Row, Total_Rate,cell_format) # TOTALRATE\n                worksheet.write('M'+Row, OARATE_Final,cell_format) # OARATE\n                worksheet.write('N'+Row, CLRATE_Final,cell_format) # CLRATE\n                worksheet.write('O'+Row, DUESRATE_Final,cell_format)  # DUES\n                \n                cell_format = workbook.add_format({'font_size': '11','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                cell_format.set_num_format('mmm-yy')\n                #print(MonthOfReport_MMM_YY)\n                \n                worksheet.write('K'+Row, MonthOfReport_Excel,cell_format) # MONTH\n            \n            # ADD ADD DRIVERS  ################################\n            # Get Add drivers\n            cursor.execute(\"{CALL dbo.GetADDDriversFromClientID(?)}\",ClientID)\n            Add_Drivers = cursor.fetchall()\n            for i in range(0,len(Add_Drivers),1):\n                ADDCOUNT = ADDCOUNT + 1\n                Row = str(int(Row) + 1)\n                Add_Drivers_Row_i = Add_Drivers[i]\n                FirstName = Add_Drivers_Row_i[0]\n                LastName = Add_Drivers_Row_i[1]\n                DRIVER_SSN = Add_Drivers_Row_i[2]\n                DRIVER_DOB = Add_Drivers_Row_i[3]\n                DRIVER_EFF_DATE = Add_Drivers_Row_i[4]\n                DRIVER_STATE = Add_Drivers_Row_i[5]\n                RFI_RF = Add_Drivers_Row_i[6]\n                EffDate_MM_YY = Add_Drivers_Row_i[7]\n                EffDayInt = int(Add_Drivers_Row_i[8])\n                #print(EffDayInt)\n                \n                DRIVER_DOB_Excel = datetime.strptime(DRIVER_DOB,'%Y-%m-%d')\n                DRIVER_EFF_DATE_Excel = datetime.strptime(DRIVER_EFF_DATE,'%Y-%m-%d')\n                \n                DRIVER_STATUS = 'ADD'\n                if ((EffDate_MM_YY == MonthOfReport_MM_yy) and (EffDayInt>15)) or (EffDate_MM_YY == MonthOfReport_MM_yy_Plus_1):\n                    No_of_Drivers = 0\n                    OARATE_Final = 0\n                    CLRATE_Final = 0\n                    DUESRATE_Final = 0\n                else:    \n                    No_of_Drivers = 1\n                    OARATE_Final = float(OARATE)\n                    CLRATE_Final = float(CLRATE)\n                    DUESRATE_Final = float(DUESRATE)\n                    \n                Total_Rate = int(OARATE_Final)+int(CLRATE_Final)+int(DUESRATE_Final)\n                \n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'blue'})\n                cell_format.set_font_name('Arial')\n                worksheet.write('A'+Row, FirstName,cell_format) # First Name\n                worksheet.write('B'+Row, LastName,cell_format) # Last Name\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'blue','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                \n                worksheet.write('C'+Row, DRIVER_SSN,cell_format) # SSN\n                worksheet.write('G'+Row, DRIVER_STATE,cell_format) # STATE\n                worksheet.write('H'+Row, RFI_RF,cell_format) # RFI / RF\n                worksheet.write('I'+Row, No_of_Drivers,cell_format) # NO of DRIVERS\n                TOTAL_DRIVER_COUNT = TOTAL_DRIVER_COUNT + No_of_Drivers\n                worksheet.write('J'+Row, DRIVER_STATUS,cell_format) # STATUS\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'blue','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                cell_format.set_num_format('mm/dd/yy')\n                worksheet.write('D'+Row, DRIVER_DOB_Excel,cell_format) # DOB\n                worksheet.write('E'+Row, DRIVER_EFF_DATE_Excel,cell_format) # EFFDATE\n                worksheet.write('F'+Row, '',cell_format) # TERMDATE\n               \n                \n                \n                cell_format = workbook.add_format({'num_format': '#,##0.00','font_color': 'blue','align': 'right'})\n                cell_format.set_font_name('Arial')\n                worksheet.write('L'+Row, Total_Rate,cell_format) # TOTALRATE\n                worksheet.write('M'+Row, OARATE_Final,cell_format) # OARATE\n                worksheet.write('N'+Row, CLRATE_Final,cell_format) # CLRATE\n                worksheet.write('O'+Row, DUESRATE_Final,cell_format)  # DUES\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'blue','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                cell_format.set_num_format('mmm-yy')\n                \n                worksheet.write('K'+Row, MonthOfReport_Excel,cell_format) # MONTH\n            \n                if ((EffDate_MM_YY == MonthOfReport_MM_yy_Minus_1) and (EffDayInt<16)) or (EffDate_MM_YY == MonthOfReport_MM_yy_Minus_2) or (EffDate_MM_YY == MonthOfReport_MM_yy_Minus_3) or (EffDate_MM_YY == MonthOfReport_MM_yy_Minus_4) or (EffDate_MM_YY == MonthOfReport_MM_yy_Minus_5) or (EffDate_MM_YY == MonthOfReport_MM_yy_Minus_6):\n                    Row = str(int(Row) + 1)\n                    DEBITCOUNT = DEBITCOUNT + 1\n                    DRIVER_STATUS = 'DB'\n                    No_of_Drivers = 1\n                    OARATE_Final = float(OARATE)\n                    CLRATE_Final = float(CLRATE)\n                    DUESRATE_Final = float(DUESRATE)\n                    Total_Rate = int(OARATE_Final)+int(CLRATE_Final)+int(DUESRATE_Final)\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'blue'})\n                    cell_format.set_font_name('Arial')\n                \n                    worksheet.write('A'+Row, FirstName,cell_format) # First Name\n                    worksheet.write('B'+Row, LastName,cell_format) # Last Name\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'blue','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    \n                    worksheet.write('C'+Row, DRIVER_SSN,cell_format) # SSN\n                    worksheet.write('G'+Row, DRIVER_STATE,cell_format) # STATE\n                    worksheet.write('H'+Row, RFI_RF,cell_format) # RFI / RF\n                    worksheet.write('I'+Row, No_of_Drivers,cell_format) # NO of DRIVERS\n                    TOTAL_DRIVER_COUNT = TOTAL_DRIVER_COUNT + No_of_Drivers\n                    worksheet.write('J'+Row, DRIVER_STATUS,cell_format) # STATUS\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'blue','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    cell_format.set_num_format('mm/dd/yy')\n                    worksheet.write('D'+Row, DRIVER_DOB_Excel,cell_format) # DOB\n                    worksheet.write('E'+Row, DRIVER_EFF_DATE_Excel,cell_format) # EFFDATE\n                    worksheet.write('F'+Row, '',cell_format) # TERMDATE\n                   \n                    \n                    \n                    cell_format = workbook.add_format({'num_format': '#,##0.00','font_color': 'blue','align': 'right'})\n                    cell_format.set_font_name('Arial')\n                    worksheet.write('L'+Row, Total_Rate,cell_format) # TOTALRATE\n                    worksheet.write('M'+Row, OARATE_Final,cell_format) # OARATE\n                    worksheet.write('N'+Row, CLRATE_Final,cell_format) # CLRATE\n                    worksheet.write('O'+Row, DUESRATE_Final,cell_format)  # DUES\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'blue','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    cell_format.set_num_format('mmm-yy')\n                    worksheet.write('K'+Row, MonthOfReport_Minus_1_Excel,cell_format) # MONTH\n                \n                if ((EffDate_MM_YY == MonthOfReport_MM_yy_Minus_2) and (EffDayInt<16)) or (EffDate_MM_YY == MonthOfReport_MM_yy_Minus_3) or (EffDate_MM_YY == MonthOfReport_MM_yy_Minus_4) or (EffDate_MM_YY == MonthOfReport_MM_yy_Minus_5) or (EffDate_MM_YY == MonthOfReport_MM_yy_Minus_6):\n                    Row = str(int(Row) + 1)\n                    DEBITCOUNT = DEBITCOUNT + 1\n                    DRIVER_STATUS = 'DB'\n                    No_of_Drivers = 1\n                    OARATE_Final = float(OARATE)\n                    CLRATE_Final = float(CLRATE)\n                    DUESRATE_Final = float(DUESRATE)\n                    Total_Rate = int(OARATE_Final)+int(CLRATE_Final)+int(DUESRATE_Final)\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'blue'})\n                    cell_format.set_font_name('Arial')\n                    worksheet.write('A'+Row, FirstName,cell_format) # First Name\n                    worksheet.write('B'+Row, LastName,cell_format) # Last Name\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'blue','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    \n                    worksheet.write('C'+Row, DRIVER_SSN,cell_format) # SSN\n                    worksheet.write('G'+Row, DRIVER_STATE,cell_format) # STATE\n                    worksheet.write('H'+Row, RFI_RF,cell_format) # RFI / RF\n                    worksheet.write('I'+Row, No_of_Drivers,cell_format) # NO of DRIVERS\n                    TOTAL_DRIVER_COUNT = TOTAL_DRIVER_COUNT + No_of_Drivers\n                    worksheet.write('J'+Row, DRIVER_STATUS,cell_format) # STATUS\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'blue','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    cell_format.set_num_format('mm/dd/yy')\n                    worksheet.write('D'+Row, DRIVER_DOB_Excel,cell_format) # DOB\n                    worksheet.write('E'+Row, DRIVER_EFF_DATE_Excel,cell_format) # EFFDATE\n                    worksheet.write('F'+Row, '',cell_format) # TERMDATE\n                   \n                    \n                    \n                    cell_format = workbook.add_format({'num_format': '#,##0.00','font_color': 'blue','align': 'right'})\n                    cell_format.set_font_name('Arial')\n                    worksheet.write('L'+Row, Total_Rate,cell_format) # TOTALRATE\n                    worksheet.write('M'+Row, OARATE_Final,cell_format) # OARATE\n                    worksheet.write('N'+Row, CLRATE_Final,cell_format) # CLRATE\n                    worksheet.write('O'+Row, DUESRATE_Final,cell_format)  # DUES\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'blue','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    cell_format.set_num_format('mmm-yy')\n                    worksheet.write('K'+Row, MonthOfReport_Minus_2_Excel,cell_format) # MONTH    \n            \n            # ADD ADD_DELETE DRIVERS  ################################\n            # Get Add_Delete drivers\n            cursor.execute(\"{CALL dbo.GetADD_DELETEDriversFromClientID(?)}\",ClientID)\n            Add_Delete_Drivers = cursor.fetchall()\n            for i in range(0,len(Add_Delete_Drivers),1):\n                ADD_DELETECOUNT = ADD_DELETECOUNT + 1\n                Row = str(int(Row) + 1)\n                Add_Delete_Drivers_Row_i = Add_Delete_Drivers[i]\n                FirstName = Add_Delete_Drivers_Row_i[0]\n                LastName = Add_Delete_Drivers_Row_i[1]\n                DRIVER_SSN = Add_Delete_Drivers_Row_i[2]\n                DRIVER_DOB = Add_Delete_Drivers_Row_i[3]\n                DRIVER_EFF_DATE = Add_Delete_Drivers_Row_i[4]\n                DRIVER_STATE = Add_Delete_Drivers_Row_i[5]\n                RFI_RF = Add_Delete_Drivers_Row_i[6]\n                EffDate_MM_YY = Add_Delete_Drivers_Row_i[7]\n                EffDayInt = int(Add_Delete_Drivers_Row_i[8])\n                TERMINATION_DATE = Add_Delete_Drivers_Row_i[9]\n                #print(EffDayInt)\n                \n                DRIVER_DOB_Excel = datetime.strptime(DRIVER_DOB,'%Y-%m-%d')\n                DRIVER_EFF_DATE_Excel = datetime.strptime(DRIVER_EFF_DATE,'%Y-%m-%d')\n                TERMINATION_DATE_Excel = datetime.strptime(TERMINATION_DATE,'%Y-%m-%d')\n                \n                DRIVER_STATUS = 'ADD/DELETE'\n                #print(EffDayInt)\n                if  (EffDayInt<16):\n                    No_of_Drivers = 1\n                    OARATE_Final = float(OARATE)\n                    CLRATE_Final = float(CLRATE)\n                    DUESRATE_Final = float(DUESRATE)\n                else:    \n                    No_of_Drivers = 0\n                    OARATE_Final = 0\n                    CLRATE_Final = 0\n                    DUESRATE_Final = 0\n                    \n                Total_Rate = int(OARATE_Final)+int(CLRATE_Final)+int(DUESRATE_Final)\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'pink'})\n                cell_format.set_font_name('Arial')\n                worksheet.write('A'+Row, FirstName,cell_format) # First Name\n                worksheet.write('B'+Row, LastName,cell_format) # Last Name\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'pink','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                \n                \n                worksheet.write('C'+Row, DRIVER_SSN,cell_format) # SSN\n                worksheet.write('G'+Row, DRIVER_STATE,cell_format) # STATE\n                worksheet.write('H'+Row, RFI_RF,cell_format) # RFI / RF\n                worksheet.write('I'+Row, No_of_Drivers,cell_format) # NO of DRIVERS\n                TOTAL_DRIVER_COUNT = TOTAL_DRIVER_COUNT + No_of_Drivers\n                worksheet.write('J'+Row, DRIVER_STATUS,cell_format) # STATUS\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'pink','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                cell_format.set_num_format('mm/dd/yy')\n                worksheet.write('D'+Row, DRIVER_DOB_Excel,cell_format) # DOB\n                worksheet.write('E'+Row, DRIVER_EFF_DATE_Excel,cell_format) # EFFDATE\n                worksheet.write('F'+Row, TERMINATION_DATE_Excel,cell_format) # TERMDATE\n               \n                \n                \n                cell_format = workbook.add_format({'num_format': '#,##0.00','font_color': 'pink','align': 'right'})\n                cell_format.set_font_name('Arial')\n                worksheet.write('L'+Row, Total_Rate,cell_format) # TOTALRATE\n                worksheet.write('M'+Row, OARATE_Final,cell_format) # OARATE\n                worksheet.write('N'+Row, CLRATE_Final,cell_format) # CLRATE\n                worksheet.write('O'+Row, DUESRATE_Final,cell_format)  # DUES\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'pink','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                cell_format.set_num_format('mmm-yy')\n                worksheet.write('K'+Row, MonthOfReport_Excel,cell_format) # MONTH\n            \n            # DELETE DRIVERS  ################################\n            # Get Delete drivers\n            cursor.execute(\"{CALL dbo.GetDeletedDriversFromClientID(?)}\",ClientID)\n            Delete_Drivers = cursor.fetchall()\n            for i in range(0,len(Delete_Drivers),1):\n                DELETECOUNT = DELETECOUNT + 1\n                Row = str(int(Row) + 1)\n                Delete_Drivers_Row_i = Delete_Drivers[i]\n                \n                FirstName = Delete_Drivers_Row_i[0]\n                LastName = Delete_Drivers_Row_i[1]\n                DRIVER_SSN = Delete_Drivers_Row_i[2]\n                DRIVER_DOB = Delete_Drivers_Row_i[3]\n                DRIVER_EFF_DATE = Delete_Drivers_Row_i[4]\n                TERMINATION_DATE = Delete_Drivers_Row_i[5]\n                DRIVER_STATE = Delete_Drivers_Row_i[6]\n                RFI_RF = Delete_Drivers_Row_i[7]\n                Termination_Date_MM_YY = Delete_Drivers_Row_i[8]\n                TerminationDayInt = int(Delete_Drivers_Row_i[9])\n                \n                \n                DRIVER_DOB_Excel = datetime.strptime(DRIVER_DOB,'%Y-%m-%d')\n                DRIVER_EFF_DATE_Excel = datetime.strptime(DRIVER_EFF_DATE,'%Y-%m-%d')\n                TERMINATION_DATE_Excel = datetime.strptime(TERMINATION_DATE,'%Y-%m-%d')\n                DRIVER_STATUS = 'DELETE'\n                No_of_Drivers = 0\n                if (Termination_Date_MM_YY == MonthOfReport_MM_yy) and (TerminationDayInt>1):\n                   No_of_Drivers = 1\n                if (Termination_Date_MM_YY == MonthOfReport_MM_yy) and (TerminationDayInt==1):\n                   No_of_Drivers = 0\n                if No_of_Drivers == 1:\n                   OARATE_Final = float(OARATE)\n                   CLRATE_Final = float(CLRATE)\n                   DUESRATE_Final = float(DUESRATE)\n                else:\n                   OARATE_Final = 0\n                   CLRATE_Final = 0\n                   DUESRATE_Final = 0 \n                   \n                Total_Rate = int(OARATE_Final)+int(CLRATE_Final)+int(DUESRATE_Final)\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'red'})\n                cell_format.set_font_name('Arial')\n                worksheet.write('A'+Row, FirstName,cell_format) # First Name\n                worksheet.write('B'+Row, LastName,cell_format) # Last Name\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'red','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                \n                worksheet.write('C'+Row, DRIVER_SSN,cell_format) # SSN\n                worksheet.write('G'+Row, DRIVER_STATE,cell_format) # STATE\n                worksheet.write('H'+Row, RFI_RF,cell_format) # RFI / RF\n                worksheet.write('I'+Row, No_of_Drivers,cell_format) # NO of DRIVERS\n                TOTAL_DRIVER_COUNT = TOTAL_DRIVER_COUNT + No_of_Drivers\n                worksheet.write('J'+Row, DRIVER_STATUS,cell_format) # STATUS\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'red','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                cell_format.set_num_format('mm/dd/yy')\n                worksheet.write('D'+Row, DRIVER_DOB_Excel,cell_format) # DOB\n                worksheet.write('E'+Row, DRIVER_EFF_DATE_Excel,cell_format) # EFFDATE\n                worksheet.write('F'+Row, TERMINATION_DATE_Excel,cell_format) # TERMDATE\n               \n                \n                \n                cell_format = workbook.add_format({'num_format': '#,##0.00','font_color': 'red','align': 'right'})\n                cell_format.set_font_name('Arial')\n                worksheet.write('L'+Row, Total_Rate,cell_format) # TOTALRATE\n                worksheet.write('M'+Row, OARATE_Final,cell_format) # OARATE\n                worksheet.write('N'+Row, CLRATE_Final,cell_format) # CLRATE\n                worksheet.write('O'+Row, DUESRATE_Final,cell_format)  # DUES\n                \n                cell_format = workbook.add_format({'font_size': '11','font_color': 'red','align': 'centre'})\n                cell_format.set_font_name('Arial')\n                cell_format.set_num_format('mmm-yy')\n                worksheet.write('K'+Row, MonthOfReport_Excel,cell_format) # MONTH\n                \n                if ((Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_1) and (TerminationDayInt==1)) or (Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_2) or (Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_3) or (Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_4) or (Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_5) or (Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_6):\n                    Row = str(int(Row) + 1)\n                    CREDITCOUNT = CREDITCOUNT + 1\n                    DRIVER_STATUS = 'CR'\n                    No_of_Drivers = -1\n                    OARATE_Final = float(OARATE)\n                    CLRATE_Final = float(CLRATE)\n                    DUESRATE_Final = float(DUESRATE)\n                    Total_Rate = int(OARATE_Final)+int(CLRATE_Final)+int(DUESRATE_Final)\n                   \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'red'})\n                    cell_format.set_font_name('Arial')\n                    worksheet.write('A'+Row, FirstName,cell_format) # First Name\n                    worksheet.write('B'+Row, LastName,cell_format) # Last Name\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'red','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    \n                    worksheet.write('C'+Row, DRIVER_SSN,cell_format) # SSN\n                    worksheet.write('G'+Row, DRIVER_STATE,cell_format) # STATE\n                    worksheet.write('H'+Row, RFI_RF,cell_format) # RFI / RF\n                    worksheet.write('I'+Row, No_of_Drivers,cell_format) # NO of DRIVERS\n                    TOTAL_DRIVER_COUNT = TOTAL_DRIVER_COUNT + No_of_Drivers\n                    worksheet.write('J'+Row, DRIVER_STATUS,cell_format) # STATUS\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'red','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    cell_format.set_num_format('mm/dd/yy')\n                    worksheet.write('D'+Row, DRIVER_DOB_Excel,cell_format) # DOB\n                    worksheet.write('E'+Row, DRIVER_EFF_DATE_Excel,cell_format) # EFFDATE\n                    worksheet.write('F'+Row, TERMINATION_DATE_Excel,cell_format) # TERMDATE\n                   \n                    \n                    \n                    cell_format = workbook.add_format({'num_format': '#,##0.00','font_color': 'red','align': 'right'})\n                    cell_format.set_font_name('Arial')\n                    worksheet.write('L'+Row, Total_Rate,cell_format) # TOTALRATE\n                    worksheet.write('M'+Row, OARATE_Final,cell_format) # OARATE\n                    worksheet.write('N'+Row, CLRATE_Final,cell_format) # CLRATE\n                    worksheet.write('O'+Row, DUESRATE_Final,cell_format)  # DUES\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'red','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    cell_format.set_num_format('mmm-yy')\n                    worksheet.write('K'+Row, MonthOfReport_Minus_1_Excel,cell_format) # MONTH\n                    \n                if ((Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_2) and (TerminationDayInt==1)) or (Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_3) or (Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_4) or (Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_5) or (Termination_Date_MM_YY == MonthOfReport_MM_yy_Minus_6):\n                    Row = str(int(Row) + 1)\n                    CREDITCOUNT = CREDITCOUNT + 1\n                    DRIVER_STATUS = 'CR'\n                    No_of_Drivers = -1\n                    OARATE_Final = float(OARATE)\n                    CLRATE_Final = float(CLRATE)\n                    DUESRATE_Final = float(DUESRATE)\n                    Total_Rate = int(OARATE_Final)+int(CLRATE_Final)+int(DUESRATE_Final)\n                   \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'red'})\n                    cell_format.set_font_name('Arial')\n                    worksheet.write('A'+Row, FirstName,cell_format) # First Name\n                    worksheet.write('B'+Row, LastName,cell_format) # Last Name\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'red','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    \n                    worksheet.write('C'+Row, DRIVER_SSN,cell_format) # SSN\n                    worksheet.write('G'+Row, DRIVER_STATE,cell_format) # STATE\n                    worksheet.write('H'+Row, RFI_RF,cell_format) # RFI / RF\n                    worksheet.write('I'+Row, No_of_Drivers,cell_format) # NO of DRIVERS\n                    TOTAL_DRIVER_COUNT = TOTAL_DRIVER_COUNT + No_of_Drivers\n                    worksheet.write('J'+Row, DRIVER_STATUS,cell_format) # STATUS\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'red','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    cell_format.set_num_format('mm/dd/yy')\n                    worksheet.write('D'+Row, DRIVER_DOB_Excel,cell_format) # DOB\n                    worksheet.write('E'+Row, DRIVER_EFF_DATE_Excel,cell_format) # EFFDATE\n                    worksheet.write('F'+Row, TERMINATION_DATE_Excel,cell_format) # TERMDATE\n                   \n                    \n                    \n                    cell_format = workbook.add_format({'num_format': '#,##0.00','font_color': 'red','align': 'right'})\n                    cell_format.set_font_name('Arial')\n                    worksheet.write('L'+Row, Total_Rate,cell_format) # TOTALRATE\n                    worksheet.write('M'+Row, OARATE_Final,cell_format) # OARATE\n                    worksheet.write('N'+Row, CLRATE_Final,cell_format) # CLRATE\n                    worksheet.write('O'+Row, DUESRATE_Final,cell_format)  # DUES\n                    \n                    cell_format = workbook.add_format({'font_size': '11','font_color': 'red','align': 'centre'})\n                    cell_format.set_font_name('Arial')\n                    cell_format.set_num_format('mmm-yy')\n                    worksheet.write('K'+Row, MonthOfReport_Minus_2_Excel,cell_format) # MONTH    \n            \n            DataRowLast = Row\n            Row = str(int(Row) + 2)\n            cell_format = workbook.add_format({'num_format': '#,##0.00','bold': True,'font_size': '11'})\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('A'+Row, '',cell_format)\n            worksheet.write('B'+Row, '',cell_format)\n            worksheet.write('C'+Row, '',cell_format)\n            worksheet.write('D'+Row, '',cell_format)\n            worksheet.write('E'+Row, '',cell_format)\n            worksheet.write('F'+Row, '',cell_format)\n            worksheet.write('G'+Row, '',cell_format)\n            worksheet.write('H'+Row, '',cell_format)\n            worksheet.write('J'+Row, '',cell_format)\n            worksheet.write('K'+Row, '',cell_format)\n            worksheet.write('L'+Row, '',cell_format)\n            worksheet.write(\"M\"+Row, \"=sum(M\"+DataRowFirst+\":M\"+DataRowLast+\")\",cell_format)\n            worksheet.write(\"N\"+Row, \"=sum(N\"+DataRowFirst+\":N\"+DataRowLast+\")\",cell_format)\n            cell_format = workbook.add_format({'bold': True,'font_size': '11'})\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write(\"I\"+Row, \"=sum(I\"+DataRowFirst+\":I\"+DataRowLast+\")\",cell_format) # SUM of Drivers\n            cell_format = workbook.add_format({'num_format': '#,##0.00','bold': True,'font_size': '11'})\n            cell_format.set_top(1)\n            cell_format.set_bottom(1)\n            cell_format.set_right(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write(\"O\"+Row, \"=sum(O\"+DataRowFirst+\":O\"+DataRowLast+\")\",cell_format)\n            cell_format = workbook.add_format({'bold': True,'font_size': '11','font_color': 'blue'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write(\"G8\", \"=I\"+Row,cell_format) # SUM of Drivers\n            \n            cell_format = workbook.add_format({'bold': True,'font_size': '11'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            Row = str(int(Row) + 2)\n            worksheet.write('H'+Row, 'TOTALS',cell_format)\n            cell_format = workbook.add_format({'bold': True,'font_size': '11','align': 'centre'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('I'+Row, '#Drivers',cell_format)\n            worksheet.write('J'+Row, 'OA Rate',cell_format)\n            worksheet.write('K'+Row, 'CL Rate',cell_format)\n            worksheet.write('L'+Row, 'Dues',cell_format)\n            worksheet.write('M'+Row, 'OA GP',cell_format)\n            worksheet.write('N'+Row, 'CL GP',cell_format)\n            worksheet.write('O'+Row, 'Dues',cell_format)\n            Row = str(int(Row) + 1)\n            cell_format = workbook.add_format({'bold': True,'font_size': '11','font_color': 'blue'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')                \n            worksheet.write('H'+Row, 'Paying For',cell_format)\n            Row_Minus_3 = str(int(Row) - 3)\n            cell_format = workbook.add_format({'font_size': '11'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write(\"I\"+Row, \"=I\"+Row_Minus_3,cell_format)\n            cell_format = workbook.add_format({'font_size': '11','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('J'+Row, OARATE,cell_format)\n            worksheet.write('K'+Row, CLRATE,cell_format)\n            worksheet.write('L'+Row, DUESRATE,cell_format)\n            worksheet.write('M'+Row, \"=I\"+Row+\"*\"+\"J\"+Row,cell_format)\n            worksheet.write('N'+Row, \"=I\"+Row+\"*\"+\"K\"+Row,cell_format)\n            worksheet.write('O'+Row, \"=I\"+Row+\"*\"+\"L\"+Row,cell_format)\n            Row = str(int(Row) + 1)\n            cell_format = workbook.add_format({'bold': True,'font_size': '11','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet.write('H'+Row, 'Gross Premium Due High Point Underwriters',cell_format)\n            Row_Minus_4 = str(int(Row) - 4)\n            worksheet.write('I'+Row, '',cell_format)\n            worksheet.write('J'+Row, '',cell_format)\n            worksheet.write('K'+Row, '',cell_format)\n            worksheet.write('L'+Row, '',cell_format)\n            worksheet.write(\"M\"+Row, \"=M\"+Row_Minus_4,cell_format)\n            worksheet.write(\"N\"+Row, \"=N\"+Row_Minus_4,cell_format)\n            worksheet.write(\"O\"+Row, \"=O\"+Row_Minus_4,cell_format)\n            Row = str(int(Row) + 1)\n            return workbook,worksheet,Row,ADDCOUNT,DELETECOUNT,ADD_DELETECOUNT,DEBITCOUNT,CREDITCOUNT,TOTAL_DRIVER_COUNT\n        \n        def CalculationsFunBroker(workbook_Broker,worksheet_Broker,Row_Broker):\n            cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','font_color': 'red'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet_Broker.write('H'+Row_Broker, 'Less Commission',cell_format)\n            worksheet_Broker.write('I'+Row_Broker, '',cell_format)\n            cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','align': 'centre','font_color': 'red','num_format': '0%'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet_Broker.write('J'+Row_Broker,OA_COMMISSION_RATE ,cell_format)\n            worksheet_Broker.write('K'+Row_Broker,CL_COMMISSION_RATE ,cell_format)\n            worksheet_Broker.write('L'+Row_Broker,'0%' ,cell_format)\n            cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            Row_Broker_Minus_1 = str(int(Row_Broker) - 1)\n            worksheet_Broker.write('M'+Row_Broker, \"=M\"+Row_Broker_Minus_1+\"*J\"+Row_Broker,cell_format)\n            worksheet_Broker.write('N'+Row_Broker, \"=N\"+Row_Broker_Minus_1+\"*K\"+Row_Broker,cell_format)\n            worksheet_Broker.write('O'+Row_Broker, \"=O\"+Row_Broker_Minus_1+\"*L\"+Row_Broker,cell_format)\n            Row_Broker = str(int(Row_Broker) + 1)\n            cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            worksheet_Broker.write('H'+Row_Broker, 'Net Premiums To High Point Underwriters',cell_format)\n            worksheet_Broker.write('I'+Row_Broker, '',cell_format)\n            worksheet_Broker.write('J'+Row_Broker, '',cell_format)\n            worksheet_Broker.write('K'+Row_Broker, '',cell_format)\n            worksheet_Broker.write('L'+Row_Broker, '',cell_format)\n            cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')      \n            Row_Broker_Minus_1 = str(int(Row_Broker) - 1)\n            Row_Broker_Minus_2 = str(int(Row_Broker) - 2)\n            worksheet_Broker.write('M'+Row_Broker, \"=M\"+Row_Broker_Minus_2+\"-M\"+Row_Broker_Minus_1,cell_format)\n            worksheet_Broker.write('N'+Row_Broker, \"=N\"+Row_Broker_Minus_2+\"-N\"+Row_Broker_Minus_1,cell_format)\n            worksheet_Broker.write('O'+Row_Broker, \"=O\"+Row_Broker_Minus_2+\"-O\"+Row_Broker_Minus_1,cell_format)\n            Row_Broker = str(int(Row_Broker) + 1)\n            cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','font_color': 'blue','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            cell_format.set_bg_color('#FFFFA8')\n            worksheet_Broker.write('H'+Row_Broker, 'Total Payable to HPU',cell_format)\n            worksheet_Broker.write('I'+Row_Broker, '',cell_format)\n            Row_Broker_Minus_1 = str(int(Row_Broker) - 1)\n            worksheet_Broker.write(\"J\"+Row_Broker, \"=M\"+Row_Broker_Minus_1+\"+N\"+Row_Broker_Minus_1+\"+O\"+Row_Broker_Minus_1,cell_format)\n            \n            Row_Broker = str(int(Row_Broker) + 1)\n            return workbook_Broker,worksheet_Broker,Row_Broker\n        \n        def CalculationsInternal(workbook_Broker,worksheet_Broker,Row_Broker):\n            cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','font_color': 'blue','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            cell_format.set_bg_color('#FFFFA8')\n            worksheet_Broker.write('H'+Row_Broker, 'Total Payable to HPU',cell_format)\n            worksheet_Broker.write('I'+Row_Broker, '',cell_format)\n            Row_Broker_Minus_1 = str(int(Row_Broker) - 1)\n            worksheet_Broker.write(\"J\"+Row_Broker, \"=M\"+Row_Broker_Minus_1+\"+N\"+Row_Broker_Minus_1+\"+O\"+Row_Broker_Minus_1,cell_format)\n            Row_Broker = str(int(Row_Broker) + 2)\n            \n            merge_format = workbook_Broker.add_format({\n                    'bold': 1,\n                    'border': 1,\n                    'align': 'centre',\n                    'bg_color':'yellow',\n                    'font_name':'Arial',\n                    'font_color':'blue',\n                    'font_size': '11'})\n            \n            PayDueDateExcel = 'PAYMENT DUE DATE: '+  PAY_DUE_DATE  \n            worksheet_Broker.merge_range('H'+Row_Broker+':J'+Row_Broker,PayDueDateExcel, merge_format)\n            Row_Broker = str(int(Row_Broker) + 1)\n            merge_format = workbook_Broker.add_format({\n                    'bold': 1,\n                    'border': 1,\n                    'align': 'centre',\n                    'bg_color':'#FFCCF9',\n                    'font_name':'Arial',\n                    'font_color':'blue',\n                    'font_size': '11'})\n            PayDueDateExcel = 'LATE FEE IF RECEIVED AFTER: '+  PAY_DUE_DATE  \n            worksheet_Broker.merge_range('H'+Row_Broker+':I'+Row_Broker,PayDueDateExcel, merge_format)\n            cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','font_color': 'blue','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            cell_format.set_bg_color('#FFCCF9')\n            worksheet_Broker.write('J'+Row_Broker, LATE_FEE_AMOUNT,cell_format)\n            Row_Broker = str(int(Row_Broker) + 1)\n            merge_format = workbook_Broker.add_format({\n                    'bold': 1,\n                    'border': 1,\n                    'align': 'centre',\n                    'bg_color':'#FFCCF9',\n                    'font_name':'Arial',\n                    'font_color':'blue',\n                    'font_size': '11'})\n            PayDueDateExcel = 'REINSTATEMENT FEE + LATE FEE IF RECEIVED AFTER: '+  REINSTATEMENT_DATE  \n            worksheet_Broker.merge_range('H'+Row_Broker+':I'+Row_Broker,PayDueDateExcel, merge_format)\n            cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','font_color': 'blue','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            cell_format.set_bg_color('#FFCCF9')\n            worksheet_Broker.write('J'+Row_Broker, REINSTATEMENT_AMOUNT,cell_format)\n            Row_Broker = str(int(Row_Broker) + 1)\n            return workbook_Broker,worksheet_Broker,Row_Broker\n            \n        ############# BROKER FILE #####################################\n        BROKER_FILE_NAME = NAMED_MOTORCARRRIER_PLANE+\" _Census Report_\" + DateOfReport_Month_Year+\"_To_Broker.xlsx\"\n        Broker_File_Path = CENSUS_FOLDER_PATH + \"\\\\\" + BROKER_FILE_NAME\n        try:\n            if os.path.exists(Broker_File_Path):\n              os.remove(Broker_File_Path,ignore_errors=True)\n        except:\n            pass      \n        \n        workbook_Broker = xlsxwriter.Workbook(Broker_File_Path)\n        worksheet_Broker = workbook_Broker.add_worksheet()\n        workbook_Broker,worksheet_Broker,Row_Broker,ADDCOUNT_Final,DELETECOUNT_Final,ADD_DELETECOUNT_Final,DEBITCOUNT_Final,CREDITCOUNT_Final,TOTAL_DRIVER_COUNT = FieldCopyFun(workbook_Broker,worksheet_Broker)\n        \n        workbook_Broker,worksheet_Broker,Row_Broker = CalculationsFunBroker(workbook_Broker,worksheet_Broker,Row_Broker)\n        Row_Broker = str(int(Row_Broker) + 1)\n        merge_format = workbook_Broker.add_format({\n                    'bold': 1,\n                    'border': 1,\n                    'align': 'centre',\n                    'bg_color':'yellow',\n                    'font_name':'Arial',\n                    'font_color':'blue',\n                    'font_size': '11'})\n            \n        PayDueDateExcel = 'PAYMENT DUE DATE: '+  PAY_DUE_DATE  \n        worksheet_Broker.merge_range('H'+Row_Broker+':J'+Row_Broker,PayDueDateExcel, merge_format)\n        Row_Broker = str(int(Row_Broker) + 1)\n        merge_format = workbook_Broker.add_format({\n                'bold': 1,\n                'border': 1,\n                'align': 'centre',\n                'bg_color':'#FFCCF9',\n                'font_name':'Arial',\n                'font_color':'blue',\n                'font_size': '11'})\n        PayDueDateExcel = 'LATE FEE IF RECEIVED AFTER: '+  PAY_DUE_DATE  \n        worksheet_Broker.merge_range('H'+Row_Broker+':I'+Row_Broker,PayDueDateExcel, merge_format)\n        cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','font_color': 'blue','num_format': 44})\n        cell_format.set_border(1)\n        cell_format.set_font_name('Arial')\n        cell_format.set_bg_color('#FFCCF9')\n        worksheet_Broker.write('J'+Row_Broker, LATE_FEE_AMOUNT,cell_format)\n        Row_Broker = str(int(Row_Broker) + 1)\n        merge_format = workbook_Broker.add_format({\n                'bold': 1,\n                'border': 1,\n                'align': 'centre',\n                'bg_color':'#FFCCF9',\n                'font_name':'Arial',\n                'font_color':'blue',\n                'font_size': '11'})\n        PayDueDateExcel = 'REINSTATEMENT FEE + LATE FEE IF RECEIVED AFTER: '+  REINSTATEMENT_DATE  \n        worksheet_Broker.merge_range('H'+Row_Broker+':I'+Row_Broker,PayDueDateExcel, merge_format)\n        cell_format = workbook_Broker.add_format({'bold': True,'font_size': '11','font_color': 'blue','num_format': 44})\n        cell_format.set_border(1)\n        cell_format.set_font_name('Arial')\n        cell_format.set_bg_color('#FFCCF9')\n        worksheet_Broker.write('J'+Row_Broker, REINSTATEMENT_AMOUNT,cell_format)\n        workbook_Broker.close()\n        GROSS_OA = TOTAL_DRIVER_COUNT*OARATE\n        GROSS_CL = TOTAL_DRIVER_COUNT*CLRATE\n        GROSS_DUES = TOTAL_DRIVER_COUNT*DUESRATE\n        \n        OA_Commission_Val =  int(OA_COMMISSION_RATE.replace(\"%\",\"\"))*0.01*int(GROSS_OA)\n        NET_OA = GROSS_OA - OA_Commission_Val\n        \n        CL_Commission_Val =  int(CL_COMMISSION_RATE.replace(\"%\",\"\"))*0.01*int(GROSS_CL)\n        NET_CL = GROSS_CL - CL_Commission_Val\n        \n        NET_TOTAL = NET_OA + NET_CL + int(GROSS_DUES)\n        #print(MonthOfReport_MMM_YY)\n        args = (ClientID,MonthOfReport_MMM_YY,ADDCOUNT_Final,DELETECOUNT_Final,ADD_DELETECOUNT_Final,CREDITCOUNT_Final,DEBITCOUNT_Final,\n                TOTAL_DRIVER_COUNT,OARATE,CLRATE,DUESRATE,OA_COMMISSION_RATE,GROSS_OA,GROSS_CL,GROSS_DUES,OA_Commission_Val,NET_OA,NET_CL,GROSS_DUES,NET_TOTAL,\n                LATE_FEE_AMOUNT,REINSTATEMENT_AMOUNT,NET_TOTAL,InEmailID,CENSUS_FOLDER_PATH,CENSUS_CUT_OFF_DATE)\n        print(args)\n        cursor.execute(\"{CALL dbo.INSERT_INTO_CLIENT_CENSUS_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}\",args)\n        db.commit()\n        args = (ClientID,'BROKER',MonthOfReport_MMM_YY,InEmailID,BROKER_FILE_NAME)\n        cursor.execute(\"{CALL dbo.INSERT_INTO_SENT_EMAIL_LOG(?,?,?,?,?)}\",args)\n        db.commit()\n        ############# INTERNAL FILE #####################################\n        if int(INTERNAL_INVOICE) == 1:\n            INTERNAL_FILE_NAME = NAMED_MOTORCARRRIER_PLANE+\" _Census Report_\" + DateOfReport_Month_Year+\"_Internal.xlsx\"\n            Internal_File_Path = CENSUS_FOLDER_PATH + \"\\\\\" + INTERNAL_FILE_NAME\n            try:\n                if os.path.exists(Internal_File_Path):\n                  os.remove(Internal_File_Path,ignore_errors=True)\n            except:\n                pass      \n            workbook_Internal = xlsxwriter.Workbook(Internal_File_Path)\n            worksheet_Internal = workbook_Internal.add_worksheet()\n            \n            workbook_Internal,worksheet_Internal,Row_Internal,ADDCOUNT_Final,DELETECOUNT_Final,ADD_DELETECOUNT_Final,DEBITCOUNT_Final,CREDITCOUNT_Final,TOTAL_DRIVER_COUNT = FieldCopyFun(workbook_Internal,worksheet_Internal)\n            workbook_Internal,worksheet_Internal,Row_Internal = CalculationsFunBroker(workbook_Internal,worksheet_Internal,Row_Internal)\n            Row_Internal = str(int(Row_Internal) + 1)\n            \n            merge_format = workbook_Internal.add_format({\n                    'bold': 1,\n                    'border': 1,\n                    'align': 'left',\n                    'bg_color':'#FFFFA8',\n                    'font_name':'Arial',\n                    'font_color':'blue',\n                    'font_size': '11'})\n            worksheet_Internal.merge_range('H'+Row_Internal+':I'+Row_Internal,'Paid(Check#)', merge_format)\n            cell_format = workbook_Internal.add_format({'bold': True,'font_size': '11','font_color': 'blue','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            cell_format.set_bg_color('#FFFFA8')\n            worksheet_Internal.write('J'+Row_Internal, '',cell_format)\n            Row_Internal = str(int(Row_Internal) + 1)\n            \n            merge_format = workbook_Internal.add_format({\n                    'bold': 1,\n                    'border': 1,\n                    'align': 'left',\n                    'bg_color':'#FFFFA8',\n                    'font_name':'Arial',\n                    'font_color':'blue',\n                    'font_size': '11'})\n            worksheet_Internal.merge_range('H'+Row_Internal+':I'+Row_Internal,'Overpaid / underpaid', merge_format)\n            cell_format = workbook_Internal.add_format({'bold': True,'font_size': '11','font_color': 'blue','num_format': 44})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            cell_format.set_bg_color('#FFFFA8')\n            worksheet_Internal.write('J'+Row_Internal, '',cell_format)\n            Row_Internal = str(int(Row_Internal) + 2)\n            \n            merge_format = workbook_Internal.add_format({\n                    'bold': 1,\n                    'border': 1,\n                    'align': 'left',\n                    'bg_color':'#FFFFA8',\n                    'font_name':'Arial',\n                    'font_color':'blue',\n                    'font_size': '11'})\n            worksheet_Internal.merge_range('H'+Row_Internal+':I'+Row_Internal,'Date Deposited', merge_format)\n            cell_format = workbook_Internal.add_format({'bold': True,'font_size': '11','font_color': 'blue'})\n            cell_format.set_border(1)\n            cell_format.set_font_name('Arial')\n            cell_format.set_bg_color('#FFFFA8')\n            cell_format.set_num_format('mm/dd/yy')\n            worksheet_Internal.write('J'+Row_Internal, '',cell_format)\n            workbook_Internal.close()\n            \n        ############# INTERNAL FILE #####################################\n        if int(CLIENT_INVOICE) == 1:\n            CLIENT_FILE_NAME = NAMED_MOTORCARRRIER_PLANE+\" _Census Report_\" + DateOfReport_Month_Year+\"_To_Client.xlsx\"\n            Client_File_Path = CENSUS_FOLDER_PATH + \"\\\\\" + CLIENT_FILE_NAME\n            try:\n                if os.path.exists(Client_File_Path):\n                  os.remove(Client_File_Path,ignore_errors=True)\n            except:\n                pass          \n            workbook_Client = xlsxwriter.Workbook(Client_File_Path)\n            worksheet_Client = workbook_Client.add_worksheet()\n            \n            workbook_Client,worksheet_Client,Row_Client,ADDCOUNT_Final,DELETECOUNT_Final,ADD_DELETECOUNT_Final,DEBITCOUNT_Final,CREDITCOUNT_Final,TOTAL_DRIVER_COUNT = FieldCopyFun(workbook_Client,worksheet_Client)\n            \n            workbook_Client,worksheet_Client,Row_Client = CalculationsInternal(workbook_Client,worksheet_Client,Row_Client)\n            \n            workbook_Client.close()\n            GROSS_OA = TOTAL_DRIVER_COUNT*OARATE\n            GROSS_CL = TOTAL_DRIVER_COUNT*CLRATE\n            GROSS_DUES = TOTAL_DRIVER_COUNT*DUESRATE\n            \n            OA_Commission_Val =  0\n            NET_OA = 0\n            \n            CL_Commission_Val =  0\n            NET_CL = 0\n            \n            TOTAL_DUE_AMT = GROSS_OA + GROSS_CL + GROSS_DUES\n            \n            args = (ClientID,MonthOfReport_MMM_YY,ADDCOUNT_Final,DELETECOUNT_Final,ADD_DELETECOUNT_Final,CREDITCOUNT_Final,DEBITCOUNT_Final,\n                TOTAL_DRIVER_COUNT,OARATE,CLRATE,DUESRATE,'0%',GROSS_OA,GROSS_CL,GROSS_DUES,OA_Commission_Val,NET_OA,NET_CL,'0','0',\n                LATE_FEE_AMOUNT,REINSTATEMENT_AMOUNT,TOTAL_DUE_AMT,InEmailID,CENSUS_FOLDER_PATH,CENSUS_CUT_OFF_DATE)\n    \n            cursor.execute(\"{CALL dbo.INSERT_INTO_CLIENT_CENSUS_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}\",args)\n            db.commit()\n            args = (ClientID,'CLIENT',MonthOfReport_MMM_YY,InEmailID,CLIENT_FILE_NAME)\n            cursor.execute(\"{CALL dbo.INSERT_INTO_SENT_EMAIL_LOG(?,?,?,?,?)}\",args)\n            db.commit()\n            \n        args = (ClientID,MonthOfReport_MMM_YY,CENSUS_CUT_OFF_DATE)\n        cursor.execute(\"{CALL dbo.UPDATE_LAST_ACTIVITY_Date(?,?,?)}\",args)\n        db.commit()\n    except:\n        db.rollback()\n        \ntry:        \n    CensusGenerationFun(CLIENTID, EMAILID)\nexcept:\n    pass\n"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"4ff0c409-d978-40c0-921d-b4b2b7e408d2","commandName":"python.commands.executeScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default1"}}]},{"uid":"b0690210-a6cc-4264-a805-b445571f6c61","commandName":"runTask","packageName":"TaskBot","disabled":false,"attributes":[{"name":"taskbot","value":{"type":"TASKBOT","taskbotInput":{"type":"DICTIONARY","dictionary":[]},"taskbotFile":{"type":"FILE","string":"repository:///Automation%20Anywhere/Bots/SendException"}}},{"name":"repeatOption","value":{"type":"STRING","string":"DO_NOT_REPEAT"}},{"name":"delayNextRepetition","value":{"type":"BOOLEAN","boolean":false}},{"name":"continueOnError","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"5af0e8c2-645c-4fce-ad80-c23084f3f398","commandName":"python.commands.openScript","packageName":"Python","disabled":true,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default2"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"import pyodbc \nimport pandas as pd\n#https://win32com.goermezer.de/microsoft/ms-office/send-email-with-outlook-and-python.html\n# os.getcwd()\n# os.chdir(r'E:\\Midwestern Insurance\\Email Module')\nstyle=\"<style>table, th, tr,td {  border: 1px solid black;  border-collapse: collapse;}th, tr ,td{  padding: 5px;  text-align: left; }</style>\"\ntable = \"<table style='width:100%'>\\n\"\n\n\nconn_str = (\n    r'DRIVER={SQL Server};'\n    r'SERVER=NDS-AA-02;'\n    r'DATABASE=HPU;'\n    r'Trusted_Connection=no;'\n    r'UID=RPA;'\n    r'PWD=nds1@2020;'\n    r'autocommit=True'\n)\n\n\ncnxn = pyodbc.connect(conn_str,MARS_Connection='Yes')\ncur = cnxn.cursor()\n# cur1 = cnxn.cursor()\n# cur2 = cnxn.cursor()\n# cur3 = cnxn.cursor()\n\nUSP_GetPendingSentEmails = \"{ call USP_GetPendingSentEmails}\"\ndf_GetPendingSentEmails = pd.read_sql_query(sql=USP_GetPendingSentEmails, con=cnxn)\n\nfor Index in df_GetPendingSentEmails.index:\n    \n    if len(df_GetPendingSentEmails) > 0:\n        try:\n            CLIENT_ID = round(int(df_GetPendingSentEmails['CLIENT_ID'][Index]))\n        except:\n            CLIENT_ID = df_GetPendingSentEmails['CLIENT_ID'][Index]\n            \n        SENT_LOG_ID = round(int(df_GetPendingSentEmails['SENT_LOG_ID'][Index]))\n        EMAIL_TYPE = df_GetPendingSentEmails['EMAIL_TYPE'][Index]\n        MONTH_YEAR = df_GetPendingSentEmails['MONTH_YEAR'][Index]\n        IN_EMAIL_ID = df_GetPendingSentEmails['IN_EMAIL_ID'][Index]\n        TO_EMAIL    = df_GetPendingSentEmails['TO_EMAIL'][Index]\n        EMAIL_ATTACHMENTS = df_GetPendingSentEmails['EMAIL_ATTACHMENTS'][Index]\n        CREATED_DATETIME = df_GetPendingSentEmails['CREATED_DATETIME'][Index]\n        IS_SENT_STATUS = df_GetPendingSentEmails['IS_SENT_STATUS'][Index]\n        SENT_DATETIME = df_GetPendingSentEmails['SENT_DATETIME'][Index]\n        # break\n        \n        #\" SELECT *  FROM [HPU].[dbo].[HPU_SETTINGS]\"\n        USP_Get_HPU_Settings = \"{ call USP_Get_HPU_Settings}\"\n        df_Get_HPU_Settings = pd.read_sql_query(sql=USP_Get_HPU_Settings, con=cnxn)\n\n        ADMIN_MAIL_ID = df_Get_HPU_Settings['ADMIN_MAIL_ID'][0]\n    \n        if EMAIL_TYPE == 'UNCLASSIFIEDCLIENTMAIL':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"NO\"+\"</td><td>\")                \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                \n                \n                # break            \n        \n        elif EMAIL_TYPE == 'UNCLASSIFIEDADDDELETEMAIL':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                \n        \n        elif EMAIL_TYPE == 'NOATTACHMENT':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n        \n        elif EMAIL_TYPE == 'DUPLICATEADDDELETE':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID                \n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n    \n        elif EMAIL_TYPE == 'NOMONTHYEAR':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>NO MONTH YEAR</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID                \n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n        \n        elif EMAIL_TYPE == 'POLICY NUMBER NOT FOUND':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>NO MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"<td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID                \n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n        \n        elif EMAIL_TYPE == 'POLICYNUMBERNOTMATCHING':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>NO MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td><td>IS_POLICY_NO_MATCHED</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\",</td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n        \n\n        \n        if EMAIL_TYPE == 'ERRORDATA':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[MONTHYEAR]',MONTH_YEAR)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td><td>IS_POLICY_NO_MATCHED</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td>\")                 \n                fileout.writelines(\"</table><p><br><p>\")        \n                \n                ################################\n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+\"DRIVER MISSING DATA ERROR\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td></tr>\")\n                \n                # Missing Data\n                USP_GetErrorDataFrom_Email_Add_Delete = \"{ call USP_GetErrorDataFrom_Email_Add_Delete (?,?) }\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetErrorDataFrom_Email_Add_Delete = pd.read_sql_query(sql=USP_GetErrorDataFrom_Email_Add_Delete, con=cnxn, params=params)\n                sn = 1\n                if len(df_GetErrorDataFrom_Email_Add_Delete) > 0:                    \n                    for row_index in df_GetErrorDataFrom_Email_Add_Delete.index:\n                        FIRST_NAME = df_GetErrorDataFrom_Email_Add_Delete['FIRST_NAME'][row_index]\n                        LAST_NAME = df_GetErrorDataFrom_Email_Add_Delete['LAST_NAME'][row_index]\n                        SSN = df_GetErrorDataFrom_Email_Add_Delete['SSN'][row_index]\n                        DOB = df_GetErrorDataFrom_Email_Add_Delete['DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetErrorDataFrom_Email_Add_Delete['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_GetErrorDataFrom_Email_Add_Delete['ADDRESS'][row_index]\n                        CITY = df_GetErrorDataFrom_Email_Add_Delete['CITY'][row_index]\n                        STATE = df_GetErrorDataFrom_Email_Add_Delete['STATE'][row_index]\n                        ZIP_CODE = df_GetErrorDataFrom_Email_Add_Delete['ZIP_CODE'][row_index]\n                        STATUS = df_GetErrorDataFrom_Email_Add_Delete['STATUS'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\")                        \n                        sn += 1\n                \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+\"DRIVER DUPLICATION DATA ERROR\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADD_SAME_DAY_DUPLICATE</td><td>ADD_SAME_MONTH_DUPLICATE</td><td>ADD_LAST_MONTH_DUPLICATE</td><td>DELETE_SAME_DAY_DUPLICATE</td><td>DELETE_SAME_MONTH_DUPLICATE</td><td>DELETE_LAST_MONTH_DUPLICATE</td><td>STATUS</td></tr>\")\n                \n                \n                USP_GetDuplicateDataForSentMail = \"{ call USP_GetDuplicateDataForSentMail (?,?) }\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetDuplicateDataForSentMail = pd.read_sql_query(sql=USP_GetDuplicateDataForSentMail, con=cnxn, params=params)\n                sn = 1\n                if len(df_GetDuplicateDataForSentMail) > 0:\n                    for row_index in df_GetDuplicateDataForSentMail.index: \n                        DRIVER_FIRST_NAME = df_GetDuplicateDataForSentMail['DRIVER_FIRST_NAME'][row_index]\n                        DRIVER_LAST_NAME = df_GetDuplicateDataForSentMail['DRIVER_LAST_NAME'][row_index]\n                        SSN = df_GetDuplicateDataForSentMail['SSN'][row_index]\n                        DRIVER_DOB = df_GetDuplicateDataForSentMail['DRIVER_DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetDuplicateDataForSentMail['EFFECTIVE_DATE'][row_index]\n                        ADD_SAME_DAY_DUPLICATE = df_GetDuplicateDataForSentMail['ADD_SAME_DAY_DUPLICATE'][row_index]\n                        ADD_SAME_MONTH_DUPLICATE = df_GetDuplicateDataForSentMail['ADD_SAME_MONTH_DUPLICATE'][row_index]\n                        ADD_LAST_MONTH_DUPLICATE = df_GetDuplicateDataForSentMail['ADD_LAST_MONTH_DUPLICATE'][row_index]\n                        DELETE_SAME_DAY_DUPLICATE = df_GetDuplicateDataForSentMail['DELETE_SAME_DAY_DUPLICATE'][row_index]\n                        DELETE_SAME_MONTH_DUPLICATE = df_GetDuplicateDataForSentMail['DELETE_SAME_MONTH_DUPLICATE'][row_index]\n                        DELETE_LAST_MONTH_DUPLICATE = df_GetDuplicateDataForSentMail['DELETE_LAST_MONTH_DUPLICATE'][row_index]\n                        STATUS = df_GetDuplicateDataForSentMail['STATUS'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(DRIVER_FIRST_NAME)+\"</td><td>\"+str(DRIVER_LAST_NAME)+\"</td><td>\"+str(DRIVER_DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADD_SAME_DAY_DUPLICATE)+\"</td><td>\"+str(ADD_SAME_MONTH_DUPLICATE)+\"</td><td>\"+str(ADD_LAST_MONTH_DUPLICATE)+\"</td><td>\"+str(DELETE_SAME_DAY_DUPLICATE)+\"</td><td>\"+str(DELETE_SAME_MONTH_DUPLICATE)+\"</td><td>\"+str(DELETE_LAST_MONTH_DUPLICATE)+\"</td><td>\"+str(STATUS)+\"</td><td>\")                        \n                        sn += 1\n                \n                \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")    \n                                         \n                \n                fileout.writelines(\"<p>\"+\"RETRO ACTIVE ADD DELETE DATA ALERT\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td><td>ADD_RETRO_ACTIVE</td><td>DELETE_RETRO_ACTIVE</td></tr>\") \n                \n                USP_GetRetroActiveAdditionDeletionSentMail = \" { call USP_GetRetroActiveAdditionDeletionSentMail (?,?) }\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetRetroActiveAdditionDeletionSentMail = pd.read_sql_query(sql=USP_GetRetroActiveAdditionDeletionSentMail, con=cnxn, params=params)    \n                sn = 1\n                \n                if len(df_GetRetroActiveAdditionDeletionSentMail) > 0:                    \n                   for row_index in df_GetRetroActiveAdditionDeletionSentMail.index:   \n                       \n                        FIRST_NAME = df_GetRetroActiveAdditionDeletionSentMail['FIRST_NAME'][row_index]\n                        LAST_NAME = df_GetRetroActiveAdditionDeletionSentMail['LAST_NAME'][row_index]\n                        SSN = df_GetRetroActiveAdditionDeletionSentMail['SSN'][row_index]\n                        DOB = df_GetRetroActiveAdditionDeletionSentMail['DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetRetroActiveAdditionDeletionSentMail['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_GetRetroActiveAdditionDeletionSentMail['ADDRESS'][row_index]\n                        CITY = df_GetRetroActiveAdditionDeletionSentMail['CITY'][row_index]\n                        STATE = df_GetRetroActiveAdditionDeletionSentMail['STATE'][row_index]\n                        ZIP_CODE = df_GetRetroActiveAdditionDeletionSentMail['ZIP_CODE'][row_index]\n                        STATUS = df_GetRetroActiveAdditionDeletionSentMail['STATUS'][row_index]\n                        ADD_RETRO_ACTIVE = df_GetRetroActiveAdditionDeletionSentMail['ADD_RETRO_ACTIVE'][row_index]\n                        DELETE_RETRO_ACTIVE = df_GetRetroActiveAdditionDeletionSentMail['DELETE_RETRO_ACTIVE'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\"+str(ADD_RETRO_ACTIVE)+\"</td><td>\"+str(DELETE_RETRO_ACTIVE)+\"</td>\")                 \n                        sn += 1\n                        \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")   \n                \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")    \n                fileout.close()\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                \n                \n                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                \n    \n                \n        \n        if EMAIL_TYPE == 'ADDDELETEALERTMAIL':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[MONTHYEAR]',MONTH_YEAR)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td><td>IS_POLICY_NO_MATCHED</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td>\")                 \n                fileout.writelines(\"</table><p><br><p>\")        \n                \n                ################################\n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+\"DRIVER MISSING DATA ALERT\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td></tr>\")\n                        \n                \n                ########################\n                \n                USP_Get_AddDeleteAlertMailData = \"{ call USP_Get_AddDeleteAlertMailData (?,?)}\"\n                params = [int(IN_EMAIL_ID), int(CLIENTID)]\n                df_Get_AddDeleteAlertMailData = pd.read_sql_query(sql=USP_Get_AddDeleteAlertMailData, con=cnxn, params=params)\n                sn = 1\n                if len(df_Get_AddDeleteAlertMailData) > 0:\n                    for row_index in df_Get_AddDeleteAlertMailData.index:\n                        FIRST_NAME = df_Get_AddDeleteAlertMailData['FIRST_NAME'][row_index]\n                        LAST_NAME = df_Get_AddDeleteAlertMailData['LAST_NAME'][row_index]\n                        SSN = df_Get_AddDeleteAlertMailData['SSN'][row_index]\n                        DOB = df_Get_AddDeleteAlertMailData['DOB'][row_index]\n                        EFFECTIVE_DATE = df_Get_AddDeleteAlertMailData['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_Get_AddDeleteAlertMailData['ADDRESS'][row_index]\n                        CITY = df_Get_AddDeleteAlertMailData['CITY'][row_index]\n                        STATE = df_Get_AddDeleteAlertMailData['STATE'][row_index]\n                        ZIP_CODE = df_Get_AddDeleteAlertMailData['ZIP_CODE'][row_index]\n                        STATUS = df_Get_AddDeleteAlertMailData['STATUS'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\")                 \n                        sn += 1\n\n                #\n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+\"DRIVER AGE ABOVE 70\"+\"<p>\")   \n                     \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td><td>Age_Years</td><td>Above_70_Age</td></tr>\")                              \n                USP_GetAbove_70_DriverDetails = \"{ call USP_GetAbove_70_DriverDetails (?,?)}\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetAbove_70_DriverDetails = pd.read_sql_query(sql=USP_GetAbove_70_DriverDetails, con=cnxn, params=params)\n                sn = 1\n                if len(df_GetAbove_70_DriverDetails) > 0:\n                    \n                    for row_index in df_GetAbove_70_DriverDetails.index:\n                        \n                        FIRST_NAME = df_GetAbove_70_DriverDetails['FIRST_NAME'][row_index]\n                        LAST_NAME = df_GetAbove_70_DriverDetails['LAST_NAME'][row_index]\n                        SSN = df_GetAbove_70_DriverDetails['SSN'][row_index]\n                        DOB = df_GetAbove_70_DriverDetails['DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetAbove_70_DriverDetails['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_GetAbove_70_DriverDetails['ADDRESS'][row_index]\n                        CITY = df_GetAbove_70_DriverDetails['CITY'][row_index]\n                        STATE = df_GetAbove_70_DriverDetails['STATE'][row_index]\n                        ZIP_CODE = df_GetAbove_70_DriverDetails['ZIP_CODE'][row_index]\n                        STATUS = df_GetAbove_70_DriverDetails['STATUS'][row_index]\n                        AGE = df_GetAbove_70_DriverDetails['AGE'][row_index]\n                        AGE_ABOVE_70 = df_GetAbove_70_DriverDetails['AGE_ABOVE_>_70'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\"+str(AGE)+\"</td><td>\"+str(AGE_ABOVE_70)+\"</td>\")                 \n                        sn += 1\n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")       \n                \n               \n                \n                ################################\n                fileout.writelines(\"<p>\"+\"RETRO ACTIVE ADD DELETE DATA ALERT\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td><td>ADD_RETRO_ACTIVE</td><td>DELETE_RETRO_ACTIVE</td></tr>\") \n                \n                USP_GetRetroActiveAdditionDeletionSentMail = \" { call USP_GetRetroActiveAdditionDeletionSentMail (?,?) }\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetRetroActiveAdditionDeletionSentMail = pd.read_sql_query(sql=USP_GetRetroActiveAdditionDeletionSentMail, con=cnxn, params=params)    \n                sn = 1\n                \n                if len(df_GetRetroActiveAdditionDeletionSentMail) > 0:                    \n                   for row_index in df_GetRetroActiveAdditionDeletionSentMail.index:   \n                       \n                        FIRST_NAME = df_GetRetroActiveAdditionDeletionSentMail['FIRST_NAME'][row_index]\n                        LAST_NAME = df_GetRetroActiveAdditionDeletionSentMail['LAST_NAME'][row_index]\n                        SSN = df_GetRetroActiveAdditionDeletionSentMail['SSN'][row_index]\n                        DOB = df_GetRetroActiveAdditionDeletionSentMail['DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetRetroActiveAdditionDeletionSentMail['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_GetRetroActiveAdditionDeletionSentMail['ADDRESS'][row_index]\n                        CITY = df_GetRetroActiveAdditionDeletionSentMail['CITY'][row_index]\n                        STATE = df_GetRetroActiveAdditionDeletionSentMail['STATE'][row_index]\n                        ZIP_CODE = df_GetRetroActiveAdditionDeletionSentMail['ZIP_CODE'][row_index]\n                        STATUS = df_GetRetroActiveAdditionDeletionSentMail['STATUS'][row_index]\n                        ADD_RETRO_ACTIVE = df_GetRetroActiveAdditionDeletionSentMail['ADD_RETRO_ACTIVE'][row_index]\n                        DELETE_RETRO_ACTIVE = df_GetRetroActiveAdditionDeletionSentMail['DELETE_RETRO_ACTIVE'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\"+str(ADD_RETRO_ACTIVE)+\"</td><td>\"+str(DELETE_RETRO_ACTIVE)+\"</td>\")                 \n                        sn += 1\n                        \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")    \n\n                ################################\n                #Excluded States Driver ADD/DELETE Data Alert\n                \n                fileout.writelines(\"<p>\"+\"EXCLUDED STATES DRIVER ADD DELETE DATA ALERT\"+\"<p>\") \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td><td>IS_EXCLUDED_STATE</td></tr>\")\n                \n                USP_GetExcludedStateSentMail = \"{ call USP_GetExcludedStateSentMail (?,?)}\"\n                df_GetExcludedStateSentMail = pd.read_sql_query(sql=USP_GetExcludedStateSentMail, con=cnxn, params=params)    \n                sn = 1\n                \n                if len(df_GetExcludedStateSentMail) > 0:                    \n                  for row_index in df_GetExcludedStateSentMail.index:   \n                      \n                       FIRST_NAME = df_GetExcludedStateSentMail['FIRST_NAME'][row_index]\n                       LAST_NAME = df_GetExcludedStateSentMail['LAST_NAME'][row_index]\n                       SSN = df_GetExcludedStateSentMail['SSN'][row_index]\n                       DOB = df_GetExcludedStateSentMail['DOB'][row_index]\n                       EFFECTIVE_DATE = df_GetExcludedStateSentMail['EFFECTIVE_DATE'][row_index]\n                       ADDRESS = df_GetExcludedStateSentMail['ADDRESS'][row_index]\n                       CITY = df_GetExcludedStateSentMail['CITY'][row_index]\n                       STATE = df_GetExcludedStateSentMail['STATE'][row_index]\n                       ZIP_CODE = df_GetExcludedStateSentMail['ZIP_CODE'][row_index]\n                       STATUS = df_GetExcludedStateSentMail['STATUS'][row_index]\n                       IS_EXCLUDED_STATE = df_GetExcludedStateSentMail['IS_EXCLUDED_STATE'][row_index]                       \n                       fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\"+str(IS_EXCLUDED_STATE)+\"</td>\")                 \n                       sn += 1\n                                         \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")    \n                                         \n                \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")    \n                fileout.close()\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                \n    "}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"38d76f10-bedd-4b0c-be19-1abd7f71793e","commandName":"python.commands.executeScript","packageName":"Python","disabled":true,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default2"}}]},{"uid":"4cfb3cb5-8e41-45a3-aceb-bdea2fc6b138","commandName":"runTask","packageName":"TaskBot","disabled":true,"attributes":[{"name":"taskbot","value":{"type":"TASKBOT","taskbotInput":{"type":"DICTIONARY","dictionary":[{"key":"ClientID","value":{"type":"NUMBER","expression":"$EMAIL_Record{CLIENTID}$"}},{"key":"IN_EMAIL_ID","value":{"type":"NUMBER","expression":"$DB_Record{ID}$"}}]},"taskbotFile":{"type":"FILE","string":"repository:///Automation%20Anywhere/Bots/Sample%20bots/Census_Generation_28_Nov"}}},{"name":"repeatOption","value":{"type":"STRING","string":"DO_NOT_REPEAT"}},{"name":"delayNextRepetition","value":{"type":"BOOLEAN","boolean":false}},{"name":"continueOnError","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"be4dfb1a-0e74-4c65-a500-2e465ce1d927","commandName":"try","packageName":"ErrorHandler","disabled":false,"children":[{"uid":"62298dbe-48f2-4f42-b8ad-e44e01635a02","commandName":"runTask","packageName":"TaskBot","disabled":false,"attributes":[{"name":"taskbot","value":{"type":"TASKBOT","taskbotInput":{"type":"DICTIONARY","dictionary":[]},"taskbotFile":{"type":"FILE","string":"repository:///Automation%20Anywhere/Bots/Sample%20bots/Send_Census_Email_31_Oct"}}},{"name":"repeatOption","value":{"type":"STRING","string":"DO_NOT_REPEAT"}},{"name":"delayNextRepetition","value":{"type":"BOOLEAN","boolean":false}},{"name":"continueOnError","value":{"type":"BOOLEAN","boolean":false}}]}],"branches":[{"uid":"17b44a2c-f85d-4094-9d95-ad73bc57689e","commandName":"catch","packageName":"ErrorHandler","disabled":false,"children":[],"attributes":[{"name":"exceptionType","value":{"type":"EXCEPTION","exceptionName":"BotException","packageName":"ErrorHandler"}}]}]}],"branches":[{"uid":"82cd773f-b1ea-4928-880d-78ed88a411f7","commandName":"else","packageName":"If","disabled":false,"children":[]}],"attributes":[{"name":"condition","attributes":[{"name":"variable","value":{"type":"NUMBER","expression":"$EMAIL_Record{CLIENTID}$"}},{"name":"operator","value":{"type":"STRING","string":"GT"}},{"name":"value","value":{"type":"NUMBER","number":"1"}}],"value":{"type":"CONDITIONAL","conditionalName":"numberVariable","packageName":"Number"}}]}],"attributes":[{"name":"loopType","value":{"type":"STRING","string":"ITERATOR"}},{"name":"iterator","returnTo":{"type":"VARIABLE","variableName":"EMAIL_Record"},"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}}],"value":{"type":"ITERATOR","iteratorName":"iterators.resultset","packageName":"Database"}}]}],"attributes":[{"name":"loopType","value":{"type":"STRING","string":"ITERATOR"}},{"name":"iterator","returnTo":{"type":"VARIABLE","variableName":"DB_Record"},"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}}],"value":{"type":"ITERATOR","iteratorName":"iterators.resultset","packageName":"Database"}}]}],"attributes":[{"name":"loopType","value":{"type":"STRING","string":"ITERATOR"}},{"name":"iterator","returnTo":{"type":"VARIABLE","variableName":"UnReadMail"},"attributes":[{"name":"sessionName","value":{"type":"STRING","string":"EmailSession"}},{"name":"readStatus","value":{"type":"STRING","string":"UNREAD"}},{"name":"folder","value":{"type":"STRING","string":"Inbox"}},{"name":"subject","value":{"type":"STRING","string":""}},{"name":"from","value":{"type":"STRING","string":""}},{"name":"messageFormat","value":{"type":"STRING","string":"HTML"}}],"value":{"type":"ITERATOR","iteratorName":"loop.iterators.email","packageName":"Email"}}]}],"variables":[{"name":"prompt-assignment","description":"A variable you can use for assignments","type":"STRING","subtype":"UNDEFINED","readOnly":false,"input":false,"output":false},{"name":"UnReadMail","description":"","type":"DICTIONARY","readOnly":false,"input":false,"output":false,"subtype":"STRING","defaultValue":{"type":"DICTIONARY","dictionary":[]}},{"name":"DB_Record","description":"","type":"RECORD","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"RECORD","record":{"schema":[],"values":[]}}},{"name":"EmailLogID1","description":"","type":"NUMBER","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"NUMBER","number":"0"}},{"name":"EMAIL_Record","description":"","type":"RECORD","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"RECORD","record":{"schema":[],"values":[]}}},{"name":"EmailLogID","description":"","type":"DICTIONARY","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"DICTIONARY","dictionary":[]}},{"name":"MASTER_RECORD","description":"","type":"RECORD","readOnly":false,"input":false,"output":false,"subtype":"UNDEFINED","defaultValue":{"type":"RECORD","record":{"schema":[],"values":[]}}},{"name":"EachFile","description":"","type":"DICTIONARY","readOnly":false,"input":false,"output":false,"subtype":"STRING","defaultValue":{"type":"DICTIONARY","dictionary":[]}}],"breakpoints":[],"packages":[{"name":"Database","version":"2.1.0-20200913-060112"},{"name":"Email","version":"3.0.0-20200901-105426"},{"name":"ErrorHandler","version":"2.1.0-20200831-031055"},{"name":"Folder","version":"2.2.0-20200831-031100"},{"name":"If","version":"2.1.0-20200825-071156"},{"name":"Loop","version":"2.1.0-20200831-031540"},{"name":"MessageBox","version":"2.1.0-20200831-031541"},{"name":"Number","version":"2.1.0-20200831-031551"},{"name":"Python","version":"2.1.0-20200831-031850"},{"name":"TaskBot","version":"2.0.1-20200907-072949"}],"workItemTemplateName":null}