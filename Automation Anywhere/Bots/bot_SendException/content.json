{"triggers":[],"nodes":[{"uid":"8780cc5e-ec0b-46ff-a0a9-c945857fba0e","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"import pyodbc \nimport pandas as pd\nimport os\n#https://win32com.goermezer.de/microsoft/ms-office/send-email-with-outlook-and-python.html\n# os.getcwd()\nos.chdir(r'D:\\SentEmail')\nstyle=\"<style>table, th, tr,td {  border: 1px solid black;  border-collapse: collapse;}th, tr ,td{  padding: 5px;  text-align: left; }</style>\"\ntable = \"<table style='width:100%'>\\n\"\n\n\nconn_str = (\n    r'DRIVER={SQL Server};'\n    r'SERVER=NDS-AA-02;'\n    r'DATABASE=HPU;'\n    r'Trusted_Connection=no;'\n    r'UID=RPA;'\n    r'PWD=nds1@2020;'\n    r'autocommit=True'\n)\n\ncnxn = pyodbc.connect(conn_str)\ncur = cnxn.cursor()\n# cur1 = cnxn.cursor()\n# cur2 = cnxn.cursor()\n# cur3 = cnxn.cursor()\n\nUSP_GetPendingSentEmails = \"{ call USP_GetPendingSentEmails}\"\ndf_GetPendingSentEmails = pd.read_sql_query(sql=USP_GetPendingSentEmails, con=cnxn)\n\nfor Index in df_GetPendingSentEmails.index:\n    \n    if len(df_GetPendingSentEmails) > 0:\n        try:\n            CLIENT_ID = round(int(df_GetPendingSentEmails['CLIENT_ID'][Index]))\n        except:\n            CLIENT_ID = df_GetPendingSentEmails['CLIENT_ID'][Index]\n            \n        SENT_LOG_ID = round(int(df_GetPendingSentEmails['SENT_LOG_ID'][Index]))\n        EMAIL_TYPE = df_GetPendingSentEmails['EMAIL_TYPE'][Index]\n        MONTH_YEAR = df_GetPendingSentEmails['MONTH_YEAR'][Index]\n        IN_EMAIL_ID = df_GetPendingSentEmails['IN_EMAIL_ID'][Index]\n        TO_EMAIL    = df_GetPendingSentEmails['TO_EMAIL'][Index]\n        EMAIL_ATTACHMENTS = df_GetPendingSentEmails['EMAIL_ATTACHMENTS'][Index]\n        CREATED_DATETIME = df_GetPendingSentEmails['CREATED_DATETIME'][Index]\n        IS_SENT_STATUS = df_GetPendingSentEmails['IS_SENT_STATUS'][Index]\n        SENT_DATETIME = df_GetPendingSentEmails['SENT_DATETIME'][Index]\n        # break\n        \n        #\" SELECT *  FROM [HPU].[dbo].[HPU_SETTINGS]\"\n        USP_Get_HPU_Settings = \"{ call USP_Get_HPU_Settings}\"\n        df_Get_HPU_Settings = pd.read_sql_query(sql=USP_Get_HPU_Settings, con=cnxn)\n\n        ADMIN_MAIL_ID = df_Get_HPU_Settings['ADMIN_MAIL_ID'][0]\n    \n        if EMAIL_TYPE == 'UNCLASSIFIEDCLIENTMAIL':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"NO\"+\"</td><td>\")                \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n                \n                \n                # break            \n        \n        elif EMAIL_TYPE == 'UNCLASSIFIEDADDDELETEMAIL':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n                \n        \n        elif EMAIL_TYPE == 'NOATTACHMENT':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n        \n        elif EMAIL_TYPE == 'DUPLICATEADDDELETE':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID                \n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n    \n        elif EMAIL_TYPE == 'NOMONTHYEAR':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>NO MONTH YEAR</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID                \n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n        \n        elif EMAIL_TYPE == 'POLICY NUMBER NOT FOUND':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>NO MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"<td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID                \n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n        \n        elif EMAIL_TYPE == 'POLICYNUMBERNOTMATCHING':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>NO MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td><td>IS_POLICY_NO_MATCHED</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\",</td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n        \n        elif EMAIL_TYPE == 'INVALIDCENSUSMONTHYEAR':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>NO MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td><td>Roll Back</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"Invalid Census MMYY\"+\",</td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n        \n        elif EMAIL_TYPE == 'NOMONTHYEAR':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>NO MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td><td>Census MMYY</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"Not Found\"+\",</td>\")                 \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")        \n                fileout.close()\n                \n                #\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n            \n########################################################################################################\n########################################################################################################\n########################################################################################################\n        \n        if EMAIL_TYPE == 'ERRORDATA':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[MONTHYEAR]',MONTH_YEAR)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td><td>IS_POLICY_NO_MATCHED</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td>\")                 \n                fileout.writelines(\"</table><p><br><p>\")        \n                \n                ################################\n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+\"DRIVER MISSING DATA ERROR\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td></tr>\")\n                \n                # Missing Data\n                USP_GetErrorDataFrom_Email_Add_Delete = \"{ call USP_GetErrorDataFrom_Email_Add_Delete (?,?) }\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetErrorDataFrom_Email_Add_Delete = pd.read_sql_query(sql=USP_GetErrorDataFrom_Email_Add_Delete, con=cnxn, params=params)\n                sn = 1\n                if len(df_GetErrorDataFrom_Email_Add_Delete) > 0:                    \n                    for row_index in df_GetErrorDataFrom_Email_Add_Delete.index:\n                        FIRST_NAME = df_GetErrorDataFrom_Email_Add_Delete['FIRST_NAME'][row_index]\n                        LAST_NAME = df_GetErrorDataFrom_Email_Add_Delete['LAST_NAME'][row_index]\n                        SSN = df_GetErrorDataFrom_Email_Add_Delete['SSN'][row_index]\n                        DOB = df_GetErrorDataFrom_Email_Add_Delete['DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetErrorDataFrom_Email_Add_Delete['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_GetErrorDataFrom_Email_Add_Delete['ADDRESS'][row_index]\n                        CITY = df_GetErrorDataFrom_Email_Add_Delete['CITY'][row_index]\n                        STATE = df_GetErrorDataFrom_Email_Add_Delete['STATE'][row_index]\n                        ZIP_CODE = df_GetErrorDataFrom_Email_Add_Delete['ZIP_CODE'][row_index]\n                        STATUS = df_GetErrorDataFrom_Email_Add_Delete['STATUS'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\")                        \n                        sn += 1\n                \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+\"DRIVER DUPLICATION DATA ERROR\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADD_SAME_DAY_DUPLICATE</td><td>ADD_SAME_MONTH_DUPLICATE</td><td>ADD_LAST_MONTH_DUPLICATE</td><td>DELETE_SAME_DAY_DUPLICATE</td><td>DELETE_SAME_MONTH_DUPLICATE</td><td>DELETE_LAST_MONTH_DUPLICATE</td><td>STATUS</td></tr>\")\n                \n                \n                USP_GetDuplicateDataForSentMail = \"{ call USP_GetDuplicateDataForSentMail (?,?) }\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetDuplicateDataForSentMail = pd.read_sql_query(sql=USP_GetDuplicateDataForSentMail, con=cnxn, params=params)\n                sn = 1\n                if len(df_GetDuplicateDataForSentMail) > 0:\n                    for row_index in df_GetDuplicateDataForSentMail.index: \n                        DRIVER_FIRST_NAME = df_GetDuplicateDataForSentMail['DRIVER_FIRST_NAME'][row_index]\n                        DRIVER_LAST_NAME = df_GetDuplicateDataForSentMail['DRIVER_LAST_NAME'][row_index]\n                        SSN = df_GetDuplicateDataForSentMail['SSN'][row_index]\n                        DRIVER_DOB = df_GetDuplicateDataForSentMail['DRIVER_DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetDuplicateDataForSentMail['EFFECTIVE_DATE'][row_index]\n                        ADD_SAME_DAY_DUPLICATE = df_GetDuplicateDataForSentMail['ADD_SAME_DAY_DUPLICATE'][row_index]\n                        ADD_SAME_MONTH_DUPLICATE = df_GetDuplicateDataForSentMail['ADD_SAME_MONTH_DUPLICATE'][row_index]\n                        ADD_LAST_MONTH_DUPLICATE = df_GetDuplicateDataForSentMail['ADD_LAST_MONTH_DUPLICATE'][row_index]\n                        DELETE_SAME_DAY_DUPLICATE = df_GetDuplicateDataForSentMail['DELETE_SAME_DAY_DUPLICATE'][row_index]\n                        DELETE_SAME_MONTH_DUPLICATE = df_GetDuplicateDataForSentMail['DELETE_SAME_MONTH_DUPLICATE'][row_index]\n                        DELETE_LAST_MONTH_DUPLICATE = df_GetDuplicateDataForSentMail['DELETE_LAST_MONTH_DUPLICATE'][row_index]\n                        STATUS = df_GetDuplicateDataForSentMail['STATUS'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(DRIVER_FIRST_NAME)+\"</td><td>\"+str(DRIVER_LAST_NAME)+\"</td><td>\"+str(DRIVER_DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADD_SAME_DAY_DUPLICATE)+\"</td><td>\"+str(ADD_SAME_MONTH_DUPLICATE)+\"</td><td>\"+str(ADD_LAST_MONTH_DUPLICATE)+\"</td><td>\"+str(DELETE_SAME_DAY_DUPLICATE)+\"</td><td>\"+str(DELETE_SAME_MONTH_DUPLICATE)+\"</td><td>\"+str(DELETE_LAST_MONTH_DUPLICATE)+\"</td><td>\"+str(STATUS)+\"</td><td>\")                        \n                        sn += 1\n                \n                \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")    \n                                         \n                \n                fileout.writelines(\"<p>\"+\"RETRO ACTIVE ADD DELETE DATA ALERT\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td><td>ADD_RETRO_ACTIVE</td><td>DELETE_RETRO_ACTIVE</td></tr>\") \n                \n                USP_GetRetroActiveAdditionDeletionSentMail = \" { call USP_GetRetroActiveAdditionDeletionSentMail (?,?) }\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetRetroActiveAdditionDeletionSentMail = pd.read_sql_query(sql=USP_GetRetroActiveAdditionDeletionSentMail, con=cnxn, params=params)    \n                sn = 1\n                \n                if len(df_GetRetroActiveAdditionDeletionSentMail) > 0:                    \n                   for row_index in df_GetRetroActiveAdditionDeletionSentMail.index:   \n                       \n                        FIRST_NAME = df_GetRetroActiveAdditionDeletionSentMail['FIRST_NAME'][row_index]\n                        LAST_NAME = df_GetRetroActiveAdditionDeletionSentMail['LAST_NAME'][row_index]\n                        SSN = df_GetRetroActiveAdditionDeletionSentMail['SSN'][row_index]\n                        DOB = df_GetRetroActiveAdditionDeletionSentMail['DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetRetroActiveAdditionDeletionSentMail['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_GetRetroActiveAdditionDeletionSentMail['ADDRESS'][row_index]\n                        CITY = df_GetRetroActiveAdditionDeletionSentMail['CITY'][row_index]\n                        STATE = df_GetRetroActiveAdditionDeletionSentMail['STATE'][row_index]\n                        ZIP_CODE = df_GetRetroActiveAdditionDeletionSentMail['ZIP_CODE'][row_index]\n                        STATUS = df_GetRetroActiveAdditionDeletionSentMail['STATUS'][row_index]\n                        ADD_RETRO_ACTIVE = df_GetRetroActiveAdditionDeletionSentMail['ADD_RETRO_ACTIVE'][row_index]\n                        DELETE_RETRO_ACTIVE = df_GetRetroActiveAdditionDeletionSentMail['DELETE_RETRO_ACTIVE'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\"+str(ADD_RETRO_ACTIVE)+\"</td><td>\"+str(DELETE_RETRO_ACTIVE)+\"</td>\")                 \n                        sn += 1\n                        \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")   \n                \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")    \n                fileout.close()\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                \n                \n                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n                \n    \n                \n                \n########################################################################################################\n########################################################################################################\n########################################################################################################\n        \n        if EMAIL_TYPE == 'ADDDELETEALERTMAIL':\n            cnxn = pyodbc.connect(conn_str)\n            cur = cnxn.cursor()\n            USP_GetEMailLogID =\"{call USP_GetEMailLogDetails_SentEmail (?)}\"\n            params = [int(IN_EMAIL_ID)]\n            df_USP_GetEMailLogID = pd.read_sql_query(sql=USP_GetEMailLogID, params=params, con=cnxn)\n            \n            if len(df_USP_GetEMailLogID) > 0:                    \n                LOG_ID = int(df_USP_GetEMailLogID['ID'][0])\n                CLIENTID = df_USP_GetEMailLogID['CLIENTID'][0]\n                emailSender = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                EMAIL_DATE_TIME = df_USP_GetEMailLogID['EMAIL_DATE_TIME'][0]\n                FROM_EMAIL_ADDRESS = df_USP_GetEMailLogID['FROM_EMAIL_ADDRESS'][0]\n                SUBJECT = df_USP_GetEMailLogID['SUBJECT'][0]\n                CLIENT_IDENTIFICATION = '[NO]'\n                \n                ####################\n                USP_GetEmailTypesDeatils_SentEmail = \"{ call USP_GetEmailTypesDeatils_SentEmail (?) }\"\n                params = [EMAIL_TYPE]\n                USP_GetEmailTypesDeatils_SentEmail = pd.read_sql_query(sql=USP_GetEmailTypesDeatils_SentEmail, params=params, con=cnxn)\n                MAIL_SUBJECT = USP_GetEmailTypesDeatils_SentEmail['MAIL_SUBJECT'][0]\n                MAIL_BODY = USP_GetEmailTypesDeatils_SentEmail['MAIL_BODY'][0]\n                \n                ########################################\n                # Client Details from Master Table     #\n                ########################################\n                CLIENTID = int(CLIENTID)\n                USP_GET_CLIENT_DETAIL_MASTER = \"{call USP_GET_CLIENT_DETAIL_MASTER (?)}\"\n                params = [int(CLIENTID)]\n                df_ClientMasterTable = pd.read_sql_query(sql= USP_GET_CLIENT_DETAIL_MASTER, params=params, con=cnxn)                \n                CLIENT_NAME = df_ClientMasterTable['CLIENT_NAME'][0]\n                CLIENT_EMAILID = df_ClientMasterTable['CLIENT_EMAILID'][0]   \n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[TRANSPORTER]', CLIENT_NAME)\n                MAIL_SUBJECT = MAIL_SUBJECT.replace('[MONTHYEAR]',MONTH_YEAR)\n                ########\n                \n                fileout = open(\"html-table.html\", \"w\")\n                MAIL_SUBJECT=str(MAIL_SUBJECT)\n                MAIL_BODY=str(MAIL_BODY)\n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+MAIL_SUBJECT +\"<p>\"+\"<p> <table border = 1><td>LOG_ID</td><td>EMAIL_DATE_TIME</td><td>FROM_EMAIL_ADDRESS</td><td>SUBJECT</td><td>CLIENT_IDENTIFICATION</td><td>MAIL_CLASSIFICATION</td><td>IS_ATTACHMENT</td><td>DUPLICATE_FILE</td><td>MONTH YEAR</td><td>IS_POLICY_NO_IN_FILE</td><td>IS_POLICY_NO_MATCHED</td></tr>\")\n                fileout.writelines(\"<tr><td>\"+str(IN_EMAIL_ID)+\"</td><td>\"+str(EMAIL_DATE_TIME)+\"</td><td>\"+str(FROM_EMAIL_ADDRESS)+\"</td><td>\"+str(SUBJECT)+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"NO\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td><td>\"+\"YES\"+\"</td>\")                 \n                fileout.writelines(\"</table><p><br><p>\")        \n                \n                ################################\n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+\"DRIVER MISSING DATA ALERT\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td></tr>\")\n                        \n                \n                ########################\n                \n                USP_Get_AddDeleteAlertMailData = \"{ call USP_Get_AddDeleteAlertMailData (?,?)}\"\n                params = [int(IN_EMAIL_ID), int(CLIENTID)]\n                df_Get_AddDeleteAlertMailData = pd.read_sql_query(sql=USP_Get_AddDeleteAlertMailData, con=cnxn, params=params)\n                sn = 1\n                if len(df_Get_AddDeleteAlertMailData) > 0:\n                    for row_index in df_Get_AddDeleteAlertMailData.index:\n                        FIRST_NAME = df_Get_AddDeleteAlertMailData['FIRST_NAME'][row_index]\n                        LAST_NAME = df_Get_AddDeleteAlertMailData['LAST_NAME'][row_index]\n                        SSN = df_Get_AddDeleteAlertMailData['SSN'][row_index]\n                        DOB = df_Get_AddDeleteAlertMailData['DOB'][row_index]\n                        EFFECTIVE_DATE = df_Get_AddDeleteAlertMailData['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_Get_AddDeleteAlertMailData['ADDRESS'][row_index]\n                        CITY = df_Get_AddDeleteAlertMailData['CITY'][row_index]\n                        STATE = df_Get_AddDeleteAlertMailData['STATE'][row_index]\n                        ZIP_CODE = df_Get_AddDeleteAlertMailData['ZIP_CODE'][row_index]\n                        STATUS = df_Get_AddDeleteAlertMailData['STATUS'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\")                 \n                        sn += 1\n\n                #\n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")\n                fileout.writelines(\"<p>\"+\"DRIVER AGE ABOVE 70\"+\"<p>\")   \n                     \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td><td>Age_Years</td><td>Above_70_Age</td></tr>\")                              \n                USP_GetAbove_70_DriverDetails = \"{ call USP_GetAbove_70_DriverDetails (?,?)}\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetAbove_70_DriverDetails = pd.read_sql_query(sql=USP_GetAbove_70_DriverDetails, con=cnxn, params=params)\n                sn = 1\n                if len(df_GetAbove_70_DriverDetails) > 0:\n                    \n                    for row_index in df_GetAbove_70_DriverDetails.index:\n                        \n                        FIRST_NAME = df_GetAbove_70_DriverDetails['FIRST_NAME'][row_index]\n                        LAST_NAME = df_GetAbove_70_DriverDetails['LAST_NAME'][row_index]\n                        SSN = df_GetAbove_70_DriverDetails['SSN'][row_index]\n                        DOB = df_GetAbove_70_DriverDetails['DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetAbove_70_DriverDetails['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_GetAbove_70_DriverDetails['ADDRESS'][row_index]\n                        CITY = df_GetAbove_70_DriverDetails['CITY'][row_index]\n                        STATE = df_GetAbove_70_DriverDetails['STATE'][row_index]\n                        ZIP_CODE = df_GetAbove_70_DriverDetails['ZIP_CODE'][row_index]\n                        STATUS = df_GetAbove_70_DriverDetails['STATUS'][row_index]\n                        AGE = df_GetAbove_70_DriverDetails['AGE'][row_index]\n                        AGE_ABOVE_70 = df_GetAbove_70_DriverDetails['AGE_ABOVE_>_70'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\"+str(AGE)+\"</td><td>\"+str(AGE_ABOVE_70)+\"</td>\")                 \n                        sn += 1\n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")       \n                \n               \n                \n                ################################\n                fileout.writelines(\"<p>\"+\"RETRO ACTIVE ADD DELETE DATA ALERT\"+\"<p>\")   \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td><td>ADD_RETRO_ACTIVE</td><td>DELETE_RETRO_ACTIVE</td></tr>\") \n                \n                USP_GetRetroActiveAdditionDeletionSentMail = \" { call USP_GetRetroActiveAdditionDeletionSentMail (?,?) }\"\n                params = [int(CLIENTID),int(IN_EMAIL_ID)]\n                df_GetRetroActiveAdditionDeletionSentMail = pd.read_sql_query(sql=USP_GetRetroActiveAdditionDeletionSentMail, con=cnxn, params=params)    \n                sn = 1\n                \n                if len(df_GetRetroActiveAdditionDeletionSentMail) > 0:                    \n                   for row_index in df_GetRetroActiveAdditionDeletionSentMail.index:   \n                       \n                        FIRST_NAME = df_GetRetroActiveAdditionDeletionSentMail['FIRST_NAME'][row_index]\n                        LAST_NAME = df_GetRetroActiveAdditionDeletionSentMail['LAST_NAME'][row_index]\n                        SSN = df_GetRetroActiveAdditionDeletionSentMail['SSN'][row_index]\n                        DOB = df_GetRetroActiveAdditionDeletionSentMail['DOB'][row_index]\n                        EFFECTIVE_DATE = df_GetRetroActiveAdditionDeletionSentMail['EFFECTIVE_DATE'][row_index]\n                        ADDRESS = df_GetRetroActiveAdditionDeletionSentMail['ADDRESS'][row_index]\n                        CITY = df_GetRetroActiveAdditionDeletionSentMail['CITY'][row_index]\n                        STATE = df_GetRetroActiveAdditionDeletionSentMail['STATE'][row_index]\n                        ZIP_CODE = df_GetRetroActiveAdditionDeletionSentMail['ZIP_CODE'][row_index]\n                        STATUS = df_GetRetroActiveAdditionDeletionSentMail['STATUS'][row_index]\n                        ADD_RETRO_ACTIVE = df_GetRetroActiveAdditionDeletionSentMail['ADD_RETRO_ACTIVE'][row_index]\n                        DELETE_RETRO_ACTIVE = df_GetRetroActiveAdditionDeletionSentMail['DELETE_RETRO_ACTIVE'][row_index]\n                        fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\"+str(ADD_RETRO_ACTIVE)+\"</td><td>\"+str(DELETE_RETRO_ACTIVE)+\"</td>\")                 \n                        sn += 1\n                        \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")    \n\n                ################################\n                #Excluded States Driver ADD/DELETE Data Alert\n                \n                fileout.writelines(\"<p>\"+\"EXCLUDED STATES DRIVER ADD DELETE DATA ALERT\"+\"<p>\") \n                fileout.writelines(\"<p> <table border = 1><td>SN</td><td>FIRST_NAME</td><td>LAST_NAME</td><td>DOB</td><td>SSN</td><td>EFFECTIVE_DATE</td><td>ADDRESS</td><td>CITY</td><td>STATE</td><td>ZIP_CODE</td><td>STATUS</td><td>IS_EXCLUDED_STATE</td></tr>\")\n                \n                USP_GetExcludedStateSentMail = \"{ call USP_GetExcludedStateSentMail (?,?)}\"\n                df_GetExcludedStateSentMail = pd.read_sql_query(sql=USP_GetExcludedStateSentMail, con=cnxn, params=params)    \n                sn = 1\n                \n                if len(df_GetExcludedStateSentMail) > 0:                    \n                  for row_index in df_GetExcludedStateSentMail.index:   \n                      \n                       FIRST_NAME = df_GetExcludedStateSentMail['FIRST_NAME'][row_index]\n                       LAST_NAME = df_GetExcludedStateSentMail['LAST_NAME'][row_index]\n                       SSN = df_GetExcludedStateSentMail['SSN'][row_index]\n                       DOB = df_GetExcludedStateSentMail['DOB'][row_index]\n                       EFFECTIVE_DATE = df_GetExcludedStateSentMail['EFFECTIVE_DATE'][row_index]\n                       ADDRESS = df_GetExcludedStateSentMail['ADDRESS'][row_index]\n                       CITY = df_GetExcludedStateSentMail['CITY'][row_index]\n                       STATE = df_GetExcludedStateSentMail['STATE'][row_index]\n                       ZIP_CODE = df_GetExcludedStateSentMail['ZIP_CODE'][row_index]\n                       STATUS = df_GetExcludedStateSentMail['STATUS'][row_index]\n                       IS_EXCLUDED_STATE = df_GetExcludedStateSentMail['IS_EXCLUDED_STATE'][row_index]                       \n                       fileout.writelines(\"<tr><td>\"+str(sn)+\"</td><td>\"+str(FIRST_NAME)+\"</td><td>\"+str(LAST_NAME)+\"</td><td>\"+str(DOB)+\"</td><td>\"+str(SSN)+\"</td><td>\"+str(EFFECTIVE_DATE)+\"</td><td>\"+str(ADDRESS)+\"</td><td>\"+str(CITY)+\"</td><td>\"+str(STATE)+\"</td><td>\"+str(ZIP_CODE)+\"</td><td>\"+str(STATUS)+\"</td><td>\"+str(IS_EXCLUDED_STATE)+\"</td>\")                 \n                       sn += 1\n                                         \n                fileout.writelines(\"</table><p><br><p>\")        \n                fileout.writelines(\"<hr style=\"+\"height:2px;border-width:0;color:gray;background-color:gray\"+\">\")    \n                                         \n                \n                fileout.writelines(\"</table><p><p>Thank you<br>HPU BOT\")    \n                fileout.close()\n                reader = open('html-table.html')\n                HTML_BODY=reader.read()                \n                import win32com.client as win32\n                outlook = win32.Dispatch('outlook.application')\n                mail = outlook.CreateItem(0)\n                mail.To = TO_EMAIL\n                mail.CC = ADMIN_MAIL_ID\n                mail.Subject = MAIL_SUBJECT\n                mail.Body = MAIL_BODY\n                mail.HTMLBody = str(HTML_BODY) #this field is optional                            \n                mail.Send()\n                reader.close()\n                USP_UpdateSentEmailLogStatus = \"{call USP_UpdateSentEmailLogStatus(?)}\"\n                cur.execute(USP_UpdateSentEmailLogStatus,SENT_LOG_ID)\n                cur.commit()\n                cur.close()\n                cnxn.close() \n                \n    "}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"9ff54627-ce1c-4b71-95c4-74cfd85a5974","commandName":"python.commands.executeScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"string":"Default","type":"STRING"}}]}],"variables":[{"name":"prompt-assignment","description":"A variable you can use for assignments","type":"STRING","subtype":"UNDEFINED","readOnly":false,"input":false,"output":false}],"breakpoints":[],"packages":[{"name":"Python","version":"2.1.0-20200831-031850"}],"workItemTemplateName":null}